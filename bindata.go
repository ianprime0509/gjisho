// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/gjisho.glade
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGjishoGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xef\x76\xe2\x38\x96\xff\xce\x53\x68\xfd\x61\x4e\xf7\xd9\x90\x4a\x55\xf5\xcc\xf6\xcc\x24\xcc\x92\x84\x24\xee\x4a\x20\x0b\x4e\x67\xeb\x13\x47\xd8\x17\x50\x47\x48\x5e\x49\x40\x98\xb3\x2f\xb4\xaf\xb1\x4f\x36\xc7\x32\x24\x18\xfc\x47\xb6\x49\x42\x52\xee\x2f\x5d\x31\xd2\x4f\xd2\x95\xee\x1f\x5d\x5d\xe9\x1e\xff\xe3\x71\x42\xd1\x0c\x84\x24\x9c\x9d\x58\x9f\x0f\x8f\x2c\x04\xcc\xe5\x1e\x61\xa3\x13\xeb\xce\xb9\xa8\xff\x6a\xfd\xa3\x51\x3b\xfe\xb7\x7a\x1d\x5d\x02\x03\x81\x15\x78\x68\x4e\xd4\x18\x8d\x28\xf6\x00\x7d\x3d\xfc\xfa\x97\xc3\x23\x54\xab\x39\x63\x40\x37\xb6\x83\xae\x89\x0b\x4c\x02\xfa\xe9\xc6\x76\x7e\xae\xd5\xce\xb8\xbf\x10\x64\x34\x56\xe8\x27\xf7\x67\xf4\xe5\xe8\xcb\x11\xb2\x31\x43\xbf\xf1\x31\x93\x9c\xd5\x6a\xb7\x20\x26\x44\x06\xad\x23\x22\xd1\x18\x04\x0c\x16\x68\x24\x30\x53\xe0\x1d\xa0\xa1\x00\x40\x7c\x88\xdc\x31\x16\x23\x38\x40\x8a\x23\xcc\x16\xc8\x07\x21\x39\x43\x7c\xa0\x30\x61\x84\x8d\x10\x46\x2e\xf7\x17\x35\x3e\x44\x6a\x4c\x24\x92\x7c\xa8\xe6\x58\x00\xc2\xcc\x43\x58\x4a\xee\x12\xdd\x6f\x8f\xbb\xd3\x09\x30\x85\x55\xd0\xde\x90\x50\x90\xe8\x27\x35\x06\x64\xf5\x96\x35\xac\x9f\x75\x23\x1e\x60\x5a\x23\x0c\x05\xbf\xad\x7e\xd2\xa3\xe6\x53\x85\x04\x48\x25\x88\x1b\x60\x1c\x20\xc2\x5c\x3a\x0d\xa8\xf5\xf4\x33\x25\x13\xb2\x6c\x21\xa8\xae\x07\x2f\x6b\x8a\xa3\xa9\x84\x03\xdd\xcf\x03\x34\xe1\x1e\x19\x06\xff\x07\x3d\x2c\x7f\x3a\xa0\x44\x8e\x0f\x90\x47\x02\xe8\xc1\x54\xc1\x01\x92\xc1\x47\x4d\xcb\x83\x60\x1c\x9f\xb8\x40\x12\x28\xad\xb9\xdc\x27\x20\x91\x1e\xeb\x73\xef\x74\x99\xa0\xeb\x7e\x40\x50\xb5\x24\x91\x0c\xbe\xcc\xc7\x7c\x12\x1d\x09\x91\xb5\xe1\x54\x30\x22\xc7\xa0\xeb\x78\x1c\x49\xae\x5b\xfc\x03\x5c\x15\x7c\x09\x8a\x0f\x39\xa5\x7c\x1e\x0c\xcd\xe5\xcc\x23\xc1\x88\xe4\xdf\xc2\x89\xc6\x03\x3e\x03\x3d\x96\x70\x6e\x19\x57\xc4\x0d\xc9\xad\x27\xc0\x7f\x9e\xd5\xe5\x4f\x72\x8c\x29\x45\x03\x58\x12\x0c\x3c\x44\x58\x2d\xf8\xb4\x1a\x8e\x08\x9a\x97\x0a\x33\x45\x30\x45\x3e\x17\xba\xbd\xcd\x61\x1e\xd6\x6a\xce\x55\x0b\xf5\x3a\x17\xce\x7d\xb3\xdb\x42\x76\x0f\xdd\x76\x3b\xbf\xdb\xe7\xad\x73\x64\x35\x7b\xc8\xee\x59\x07\xe8\xde\x76\xae\x3a\x77\x0e\xba\x6f\x76\xbb\xcd\xb6\xf3\x1d\x75\x2e\x50\xb3\xfd\x1d\x7d\xb3\xdb\xe7\x07\xa8\xf5\xdf\xb7\xdd\x56\xaf\x87\x3a\xdd\x9a\x7d\x73\x7b\x6d\xb7\xce\x0f\x90\xdd\x3e\xbb\xbe\x3b\xb7\xdb\x97\xe8\xf4\xce\x41\xed\x8e\x83\xae\xed\x1b\xdb\x69\x9d\x23\xa7\x83\x82\x06\x97\x50\x76\xab\x17\x80\xdd\xb4\xba\x67\x57\xcd\xb6\xd3\x3c\xb5\xaf\x6d\xe7\xfb\x41\xed\xc2\x76\xda\x01\xe6\x45\xa7\x8b\x9a\xe8\xb6\xd9\x75\xec\xb3\xbb\xeb\x66\x17\xdd\xde\x75\x6f\x3b\xbd\x16\x6a\xb6\xcf\x51\xbb\xd3\xb6\xdb\x17\x5d\xbb\x7d\xd9\xba\x69\xb5\x9d\x43\x64\xb7\x51\xbb\x83\x5a\xbf\xb7\xda\x0e\xea\x5d\x35\xaf\xaf\x83\xa6\x6a\xcd\x3b\xe7\xaa\xd3\x0d\xfa\x87\xce\x3a\xb7\xdf\xbb\xf6\xe5\x95\x83\xae\x3a\xd7\xe7\xad\x6e\x0f\x9d\xb6\xd0\xb5\xdd\x3c\xbd\x6e\x85\x4d\xb5\xbf\xa3\xb3\xeb\xa6\x7d\x73\x80\xce\x9b\x37\xcd\xcb\x96\xae\xd5\x71\xae\x5a\xdd\x5a\x50\x2c\xec\x1d\xba\xbf\x6a\x05\x9f\x82\xf6\x9a\x6d\xd4\x3c\x73\xec\x4e\x3b\x18\xc6\x59\xa7\xed\x74\x9b\x67\xce\x01\x72\x3a\x5d\xe7\xa9\xea\xbd\xdd\x6b\x1d\xa0\x66\xd7\xee\x05\x04\xb9\xe8\x76\x6e\x0e\x6a\x01\x39\x3b\x17\x41\x11\xbb\x1d\xd4\x6b\xb7\x42\x94\x80\xd4\x28\x32\x23\x9d\xae\xfe\xfb\xae\xd7\x7a\x02\x44\xe7\xad\xe6\xb5\xdd\xbe\xec\x21\xbb\x1d\x99\xbe\xc3\x5a\xad\x39\x55\x63\x2e\xfe\xb6\x2e\x14\xd0\x31\xc1\xcc\x17\x64\x02\x47\x7f\x3e\xfa\xeb\x7f\x8e\x26\x98\xd0\x43\x97\x4f\x1a\xb5\x5a\xbd\xde\xa8\x1d\x13\xa6\x40\x0c\xb1\x0b\x8d\x1a\x42\xc7\x02\xfe\x67\x4a\x04\x48\x44\xc9\xe0\xc4\x1a\xa9\x87\x7f\xb7\x9e\xe5\xd9\xd7\xc3\x2f\x5f\xac\x4f\xba\x5c\x20\xc1\x9e\x6a\xd6\x97\x9c\x55\x57\x0b\x1f\x50\xc0\x2f\x01\xf2\x56\x29\x86\x27\x80\x2e\x7f\x23\x72\xcc\xe3\x0b\x78\x20\x5d\x41\x7c\xcd\xec\x4d\xf4\x1b\xf6\x31\x03\x09\xc8\x0b\xa5\x03\x16\x0b\x34\xe4\x02\x5d\xb6\x3b\x37\xad\xc3\x78\x84\x67\x1e\xda\x94\x8d\xf1\xe5\xb1\xa6\x97\x34\xa2\xd7\x0a\x81\x87\x6c\xed\x52\x2c\xe5\x89\x75\xa9\x1e\x6e\xb9\xcf\x67\x20\x6e\x80\x4d\x2d\x44\xbc\x13\x6b\x82\x09\xd3\x7f\x05\xe5\x11\x3a\xf6\x05\xf7\x41\xa8\x05\x0a\x28\x70\x62\xb9\x98\xf5\x87\xdc\x9d\x4a\xab\x71\x81\xa9\x84\xe3\x4f\xab\x02\xcb\xf2\xee\x98\x50\x2f\xfc\x77\x5c\x7b\xa7\xfc\xd1\x5a\xfd\xba\x8d\x3e\x23\x92\x0c\x28\x58\x0d\x47\x4c\xb7\xa0\x8b\x74\x27\xae\x0e\x17\x64\x25\xf8\xad\xc6\x0c\x84\x22\x2e\xa6\xb1\x15\x23\x63\x89\x1f\xcf\x0d\xf7\x80\x9e\x4e\x95\x0a\xc0\xd6\x4a\x16\x18\x5b\xc6\xf8\xf2\x54\x13\xe0\x02\x99\x81\xec\x7b\x30\xc4\x53\xaa\xf2\xd5\xc6\x7a\xc9\xf6\x83\x3f\xac\x06\xf6\xfd\x43\x3c\xe0\x53\x65\x5a\x5b\xc1\xa3\xb2\x90\x12\x98\x49\x8a\x15\x1e\x50\x38\xb1\x16\x20\xad\x46\x33\x40\x59\xf2\x50\x3c\xd8\xf1\xa7\x90\xbe\x91\x6f\x3e\x76\x1f\x08\x1b\xa5\x37\x0a\x8f\x3e\x66\x5e\xca\x22\x88\xab\x34\x24\x94\xe6\xa3\x8c\xcf\x25\x09\xd7\xcd\x97\xa4\x11\x6c\x75\xf7\xf8\x53\x94\x25\x36\xc6\xb8\x3d\xbe\xcd\x46\xe5\x74\x30\xd1\x0c\x19\xb0\xa6\xc9\x02\x7f\xee\xe5\xe7\xed\xe2\x1b\x3d\x5c\xeb\xdd\x7a\xcf\xb6\x17\x7a\xd3\xf7\x29\x71\x35\xd7\xdc\x13\xe6\xf1\x79\x28\x2e\xb0\xef\x2f\xff\x2c\x28\x2f\x36\x27\x72\x06\x4c\x49\xab\x71\x79\xfe\xad\x7f\x7a\xe7\x38\x9d\x76\x5f\xeb\xe8\xfe\x4d\xb3\xf7\x0d\xfd\x2f\x0a\xbe\x7f\x6b\x7d\xdf\xfe\xd8\x73\xba\x77\x67\xce\x5d\xb7\xa5\x3f\x66\x35\xb3\xe4\x8b\xfe\x9c\x78\x6a\x6c\x35\x7e\x3d\x3a\x32\xad\x31\x86\x40\x44\x5b\x8d\xbf\xc4\x54\x91\x64\xc4\x30\x5d\x56\x18\x68\xa1\x50\xf7\x05\x48\x59\xd7\xc3\xb2\xd0\x18\x33\x8f\x82\x38\xb1\xe6\x9a\x66\xa1\xdc\xb8\x0d\x4a\x58\x48\xce\xb1\xef\x83\x77\x62\x31\x1e\xea\xa9\x4d\xc0\x07\x58\xa4\xa2\x7d\x83\x45\x0a\xd4\x1e\xca\x65\x03\xf1\xda\x85\x19\x60\x0a\x22\x5c\x6c\x12\xb0\x70\xc7\x4f\xdf\x5e\x56\xde\xe6\x12\x25\x5a\xdc\x69\xa6\xeb\x07\x76\x84\xd5\x90\x94\x78\x50\xd7\xea\x3c\x11\x63\x6b\xfc\x26\x53\x93\xd4\x03\xbd\x92\xfb\x81\x09\x04\x52\x59\x8d\xaf\xdb\xcb\xb3\x34\xb1\xca\x10\x2c\xae\xae\xb1\x22\x4e\xa7\x58\x1e\xaa\x95\x1a\x7b\xd9\xf1\xef\x84\x06\xe9\x74\x88\xa7\x45\x4f\xf3\x4d\x8b\x29\xb1\x58\x67\xa4\xf0\x43\x12\x4c\x49\x42\x65\x10\xab\x28\xc4\x04\x8b\x11\x61\x7d\xa9\xb0\x50\x56\xe3\xcf\x25\x20\x20\xb0\x17\xca\x00\x28\xee\x97\x03\x18\x70\xa5\xf8\xa4\x20\x46\x60\xe5\x63\xb1\xe8\x13\xf7\xc9\x54\x03\x8f\xa8\xfa\x90\x30\xaf\x2e\x17\x93\x01\xa7\xc4\x2d\x0d\x1c\x98\x82\xb3\xd0\x8a\x33\x5c\xe0\x99\x90\x12\xb4\xa4\x9c\xe5\x02\x34\x54\x84\x6b\xeb\x3a\x55\x1b\x66\xb7\x11\x22\xd5\xdd\x31\x66\x23\xf0\xb6\x9a\x38\x5b\x7d\x37\x02\x8f\xb3\x6b\xa3\xf4\x8a\xb3\x71\xd3\x28\x6a\x64\xef\xa6\x01\x64\xdb\xbe\x69\xb5\x9f\x2d\xcc\x54\x2d\xb3\x1a\x7d\xea\xf0\x36\xec\xe3\xe8\x4f\xc9\x74\x4b\xa7\x59\x29\x7a\x15\xa7\x55\x61\x3a\xa5\xd0\x28\x91\x3e\x79\xb4\x61\xcf\x15\x9c\x52\xf0\x22\xb6\x7a\x56\xef\x77\xa5\x18\x8b\x54\x1f\x4b\xdd\xe3\x01\x16\x7d\x3f\x90\x64\x0b\xab\xc1\x60\x06\x22\x13\x27\xc2\xc5\xe0\x8d\xa0\x2e\x00\xbb\xe3\x18\x1e\xee\x82\x9c\x52\x25\x5b\xde\x08\xba\xab\x22\x06\xec\x9c\x57\xf9\xfe\x4e\x60\xee\xf3\x40\x5b\xbd\x89\xa2\x2d\x2c\x21\xe4\x18\x7b\x7c\xbe\x34\x67\x19\x67\x66\x20\xa9\xc4\x89\x27\xd0\x35\x91\x2a\xb0\xd6\x22\x26\xbe\x9e\x9a\x14\x92\xed\x84\x6c\xbb\x22\x5d\x2c\xf9\x80\x42\xe8\x47\x99\x70\x0f\xac\xc6\x40\xf0\x79\x0e\xb4\xc8\x32\x16\x7c\x5e\x0f\xf1\x92\x97\x71\x97\xcf\x7b\x4f\x45\x0c\x55\x5e\xb6\x66\x4a\x15\xcf\xd9\x00\xaf\x2a\xdb\x8b\x88\x99\x5d\x88\xf6\x18\x27\x4b\x74\xa0\x79\x45\x7b\x3c\x69\x62\x0a\xbf\x23\x7f\x59\x82\xfe\xcb\xf6\x97\x99\xf9\x09\x7a\xe0\x63\x81\x15\x7f\x43\xa7\xc0\x3b\x9a\x8c\x84\x15\xbb\xab\xc9\xd8\xde\x7a\xbf\xa9\x6f\x26\xd7\x16\xdb\xd4\x29\x93\x69\x50\xbd\x84\x87\x25\x6f\xd5\x22\x46\x54\x1e\xab\x32\xc3\xb4\x79\x5b\x47\x4b\x4e\x33\x2d\xd9\x5f\x54\x7a\x28\xbb\x18\x4e\x1c\x46\x21\xdf\x51\x36\x6d\xe2\xe9\x73\x8d\x07\x40\x43\x1b\x6d\xb9\x9d\xff\x86\x19\x0e\xbf\xbe\x27\x33\x0d\xab\x65\x58\x85\x4c\x2f\xb8\x5e\x74\x65\xd2\xb9\x98\x82\x85\x66\x98\x4e\xe1\xc4\xfa\x7c\xf8\x25\xdd\xb6\x0a\xa4\xa7\x69\x6b\xc7\x52\x2d\x28\x64\xf6\x48\x4f\x47\xd4\xa9\x52\x7f\xc0\x0c\x67\x77\x24\x13\x3f\xdb\x12\x34\xf1\x53\xa0\x5d\xf8\x2a\xe2\x40\xf2\xf9\x2b\xe2\x10\x72\xf9\x2c\x50\xb6\xdf\x02\x65\x1b\xc7\x3b\xe4\xb4\x3f\xc8\x0f\xcd\x6a\xff\xf1\xe5\xd7\x7d\x61\xb6\x3f\x48\xc5\x6d\xd9\x08\xc6\xdb\xa3\x67\x8a\xbc\x39\xb7\x01\x53\x62\x71\x0e\x0a\x13\x2a\xdf\x1f\xb7\x95\x3f\x28\x49\x81\x31\x3f\x2c\x49\x01\xd1\x07\x26\x9f\x0d\xa5\xef\x6e\x4e\x4d\xe2\x70\xe6\x02\xfb\xe5\xe6\xe8\x11\x53\x32\x32\x57\x24\x9b\xee\x9c\xe5\xa1\x0a\xd4\x29\x61\x0f\x6b\xfe\x9c\xd5\xf7\x6b\xfd\xd9\xd8\x87\x53\x48\xa0\xe9\xb5\x5e\xf7\xc2\xc5\x5e\x09\xb4\x6c\x84\xcc\xd0\x9f\x6d\x8a\xbc\x8a\x40\xf3\x29\x76\x61\xcc\xa9\x07\x22\xed\x70\xeb\xd5\xbd\x78\xb9\x7c\x5b\x69\x6b\xa3\xa8\xbb\xaf\xd8\x12\x28\x64\x35\x26\x4c\x75\x2c\x09\x4c\x1d\x0c\xd1\xc8\x97\x09\x17\x60\xb3\x21\x4f\x88\x7d\x89\xeb\xf9\x9b\x84\x74\x24\xc4\xc1\x4c\xfd\xd7\x0f\xeb\x08\x03\xb5\x8c\x23\x62\x4a\x91\xb0\x2c\x19\xe3\xea\xbf\x52\x64\x48\xbc\xdf\x74\x67\x54\xd9\x05\x65\xaa\x03\xf4\xa2\x07\xe8\x05\x16\x84\xc2\xee\x43\x6f\x4e\x94\x3b\x8e\x95\x32\x49\x03\xda\x0b\x87\xd8\x78\x69\x97\xb9\xc0\x54\xf6\x51\x71\x1c\x42\x15\x5e\xb4\xda\x80\x07\xeb\xc0\x6a\xac\xf4\x8e\x5e\x16\x3f\x34\x9f\x1a\x6c\x63\x5f\x9d\x4f\xa3\xb6\x41\xf8\x69\xdf\x59\xb6\xc0\x16\xdd\x28\x78\x65\x67\xa3\xcc\x18\x69\x19\x98\xa2\x41\x2d\xe6\xc4\x8b\x27\xa0\x41\x08\x4a\x52\x97\x0b\x91\x2f\x0e\xa8\xa8\x5f\x23\x0e\xab\x50\x68\xca\x13\x98\x11\x11\x51\x81\x43\xa2\xb4\x2e\x17\xa6\x63\x1c\x58\x19\x5a\xc6\xe1\x15\x3e\x48\x8a\x80\x1a\xd3\x15\xa5\x38\xe2\x4c\xeb\xef\x98\xc2\x71\x80\x65\xa9\x1c\x87\x59\xd0\x2b\x97\x06\x49\x43\x07\x66\xcc\x85\x2b\x7d\x6c\x80\xe6\x82\x28\xc2\x46\x72\x17\x6d\xe5\x76\x7c\x45\xc0\xcc\xcf\x03\xe2\xab\xad\xfc\x77\xe1\x0d\x9c\xd5\xe1\xc0\x80\x53\x2f\xcb\x81\x95\x81\xb8\x79\xda\xf0\xcb\xd7\xbf\x46\xfe\xcb\x03\x6f\x7e\x0c\xb1\x5e\x27\xdb\x79\x16\x29\x6f\xe4\x48\x8b\xd6\xd8\x81\x53\x2d\x0d\x30\xbf\x83\x2d\x0d\x2d\xf7\x59\x5d\x04\x2c\xdb\xf1\x16\x2d\x9e\x43\x70\xed\x46\xc8\x69\xb3\x4d\x1f\x25\xdd\x2f\x99\xb3\x12\x7e\xc5\x20\xf3\xfb\xf2\xd3\xd0\xf6\x42\xbc\xe5\x8e\x32\x88\xa0\x55\xd2\x67\x97\xd2\xc7\xf0\xec\x32\x02\xb6\xf7\xd2\xa7\x92\x32\x05\x21\xcd\x3d\x32\x59\x80\xa9\x36\x1b\xae\x4c\xb6\x6c\xc4\xca\x64\xdb\x5b\xa1\x69\x78\x3e\x1a\x01\xdb\x7b\xa1\xb9\x32\xd9\x70\x65\xb1\x55\x16\x5b\x65\xb1\xed\xad\xf0\xf9\xba\x4f\xc2\xc7\x7c\x9e\x0c\x41\xcd\x00\x0d\xc0\x5e\x2e\x5c\x87\xe9\xab\xe8\x79\x2d\x98\xad\x38\x02\xa2\x02\x96\x8a\x31\x90\xee\x73\x21\xbf\x55\x54\x61\x75\x64\x61\x4c\xbc\x78\x02\x56\x47\x16\xeb\x60\x25\x8e\x2c\x22\xb7\x6b\xb5\xcf\x29\xf8\xf2\x11\x4f\x31\x36\x6f\xdc\xe6\xa5\xb2\xc6\xdc\xba\x77\xbb\x0a\xca\x5c\xbf\x78\xfb\x44\xc6\x2e\x9f\x37\x9f\x7f\xcf\x11\xb1\xf9\xd4\x9e\x9e\x59\x14\x2c\x8b\x13\x6b\x2d\x94\xcf\xd8\xb0\xfc\x41\x37\xf9\xc9\x1b\xe8\x36\x47\x7a\x7a\x2a\x83\x30\xa5\x74\x65\xc1\x44\x4a\xc5\x59\x30\xb9\x16\x91\xb9\xf9\xf2\xad\x0c\xec\xbb\xb9\x54\x51\x99\x3f\x2b\x3c\x93\xe7\x48\xe0\x11\x4f\x7c\x0a\xb9\x5f\x22\x79\x6a\xa4\xb2\xb1\xf6\xc8\xc6\x5a\xcd\x66\x65\x66\xa5\x60\x1a\x99\x59\x4b\x4a\x56\x86\x96\x21\xe0\xab\x1b\x5a\xab\xa5\x5e\xd9\x5a\x29\xa5\x2b\x5b\x2b\x52\x2a\xce\xd6\xca\xbb\x8e\xcc\xcd\xad\x56\x49\xe4\x37\xb8\xf5\xf5\x72\x31\xd4\x45\xe3\x7c\x77\x15\x42\x6d\x40\xc2\x97\x78\x2b\xf0\xc5\x6f\xa2\xe5\xbe\x25\x55\xf6\x2a\x5a\x8a\xf5\xff\x12\x57\xd1\x9a\x5a\xdd\x9f\xe2\xfd\xb9\x75\x96\xe7\xc2\x58\xf8\x36\xbf\x36\xcd\x06\xd8\x7d\x88\x7d\xab\xbf\xf4\x68\xe2\x2a\xe7\x7d\xe8\xb4\xe4\x16\x66\xb3\x7a\xbe\x1c\x00\x4f\x28\x11\xcb\xcc\xa5\xc4\x7d\x88\xd8\x64\x0c\xcf\xc8\x08\x2b\x38\xd5\xd7\x0f\x5e\xe0\xb9\x44\x7b\x82\x47\xb0\xf7\xb7\x18\x36\x30\xd6\x1e\xe1\x1d\xf1\xba\x2f\x60\x46\xf8\x54\xe6\x78\x86\x77\x0f\x9e\xd1\xdb\x9b\xb7\x4a\xd7\x39\x76\xc8\xc5\x1c\x0b\xaf\x62\xda\x9d\x30\xed\x45\x48\xcd\x8a\x6f\xe3\xf9\x96\xc1\xa3\x7a\xaf\x3c\xbb\xf3\x47\x28\xf3\xf1\xac\xc3\x47\x23\x0a\xeb\x9c\xbb\xba\x95\x16\xf9\xe5\x15\x18\x78\x0f\x18\x50\xe9\x21\xaf\x33\x60\x94\x18\x15\xff\xc5\xf0\xdf\x8c\xc0\xbc\x1e\xd0\xe9\x9d\x71\x20\x76\x1f\x96\x1e\x47\x60\x5e\xde\xd5\xf6\x82\x3a\xf7\x1d\x6f\x6f\x52\xf6\x89\xe6\xdb\x9b\xf2\xcf\xb1\xe6\x79\x9b\x74\x0f\x52\x49\x45\x7e\x8c\xb8\x3b\xb5\x7b\x64\xb0\xb6\x7d\xdb\x96\x1e\x57\x80\x3d\x10\xd1\x2d\x5e\x6e\x89\x51\x44\x42\x98\xbb\x72\x92\x13\x87\x6d\x9f\x03\xf0\x79\xdf\xa5\x5c\x42\x7f\xb0\xd4\x3b\x89\x5d\x36\x78\xce\x76\x5b\xb7\x85\x0f\x6f\xa7\x68\xb6\x42\xc2\xb6\xa0\x26\x2b\xa7\xc1\xb2\x34\xd7\xfa\x50\x53\xf5\x96\xa9\x33\x21\x49\x4f\xbd\x8d\x23\x21\x59\x1f\xe5\x49\xa6\x52\xe2\xc1\xee\x42\x0f\x2c\xdf\x00\x9b\xee\xdd\xba\xd3\x55\xfa\x9c\xf5\xf5\xfe\x23\xe7\x1b\xcd\xe5\x12\x16\xfa\x61\x12\xcb\x30\x43\x5e\x40\x9c\xc4\x8a\x1f\x6c\x91\x72\x1f\x58\x7d\x02\x6c\xfa\xb2\x8b\xd4\x54\x73\x9a\x19\x43\xb9\x37\x31\x25\x34\x61\x46\x4e\xc3\x01\x9f\xaa\x73\x82\x29\x1f\x2d\xb3\x19\xae\x7d\x58\x62\xe5\x9c\xb8\xed\x85\x2d\xc9\x3f\x53\xd2\x27\x6d\x45\xdc\x73\x0f\x27\x58\x12\x5b\xaa\x72\xe1\x43\x7f\x4c\x98\xb2\x1a\x9e\xee\x72\x66\x05\xfd\x38\x17\x30\xd5\x1f\x72\xa1\x33\x7b\x86\xf1\x19\x59\xf5\x7c\xc1\x47\x02\x4f\x96\x6b\x2e\x5e\x0f\x6f\x71\x46\x98\x77\xd7\x6a\x1c\x1d\x7e\x3e\xcc\x4c\xae\xf8\x94\xfa\x36\x56\xf3\x3f\x27\x0e\xff\xff\xff\xdb\xca\x8d\x9b\x0d\x3d\x99\xe8\x94\x92\xb1\x29\x49\x33\x12\xf5\x66\x81\x2f\x53\xf0\x5a\x8d\xf5\x1c\xbc\x7f\xa2\xea\xef\xf1\x69\x78\xff\x34\x52\x7f\xcf\x82\xa4\x7c\xc4\xd7\x93\x7a\x91\x40\x14\xd5\x75\x0a\x6d\x96\x39\xc3\xcb\x5c\xc6\x4b\x1e\x9c\x10\x55\x7f\xfc\xbc\xc5\x54\x51\x95\xef\x01\x05\x05\x5b\x99\xb4\xc6\xc4\x83\x7b\xe2\x8d\x40\x19\x64\xa6\x4c\xc0\x20\x6c\x4c\x06\x44\xb5\x75\x42\xd8\x4c\x10\x01\xd2\xe7\x4c\x42\x8e\x4e\x84\x46\xae\xce\x88\xcc\x30\xad\xeb\x3f\x4f\xac\xd9\x60\xed\x95\x8e\xbc\x99\x2e\x5f\x36\xa1\xf0\xa6\xa1\xea\x63\x97\xb0\x51\xc2\x16\x20\x61\x78\xcb\xec\xbc\x58\x00\xb6\xd2\xcd\x84\xd0\x44\xc8\xce\xc6\x50\x34\xb1\x02\xc5\x0b\x3e\x55\x7d\xfd\x36\x68\xba\xc4\x8f\x57\xbb\xc9\x4f\x57\xe6\x39\xae\xca\x85\xf2\x26\x49\x3a\x72\x55\x79\xa9\x94\x29\xf1\x64\xda\xd9\x8e\x72\x1b\xde\x58\x0b\xaf\xa7\x13\x5e\x46\x02\x2c\x1f\x61\xde\x69\x66\xe1\xcc\x20\x01\xb4\x7c\x0d\x77\x87\x2a\x7a\x23\xcd\x70\x5c\xce\xe0\x84\x1a\x69\x69\x86\x8b\xaa\xf5\xbd\x91\xfb\x19\xb9\x88\x13\xa3\x47\x77\xe9\x91\x30\xad\x92\x27\x02\x74\xab\x7f\x25\xea\x46\x82\x19\x13\xf2\x7e\x1b\x6c\x15\x13\x62\x3c\x77\xbd\x51\xcc\x25\xe2\x8c\xe3\x34\x77\x9b\x21\xf9\x9d\xe4\x38\x4e\xb2\x11\x3e\xa7\x5e\xbf\xcd\x73\x58\xb3\xfe\xe4\x7d\x44\xde\xae\x8c\xe1\xb4\xc8\xc6\x97\x3a\xac\x29\x74\xda\x9a\xf3\x7e\x72\x42\x75\xb3\xa7\x3a\x37\x2b\x9b\x5f\x64\xde\xac\x69\x7c\x69\xd9\x20\x46\xb2\x4c\xe6\x8c\xac\xe8\xc7\x2a\xfd\x6a\x92\x29\x8a\x76\xc5\x71\x2d\x36\xa2\x44\x8e\x2b\x86\x33\xa8\xfc\x4e\x18\xce\xf4\x25\x92\x1f\x88\xfb\xde\x38\x38\xe1\xc7\x49\x7e\x9c\x6d\x7f\x62\x3a\xc7\x8b\xcc\x70\xe8\x2a\xc7\x71\x1a\x48\xd9\x1c\xc7\x1b\x9b\x5c\x2e\x3c\x93\xcb\x42\x3b\xb9\x3e\xb2\xab\x2b\x23\xdb\x61\x73\xc5\x2f\x05\xe5\xba\x0c\xb4\x46\xb4\x22\x17\x82\xaa\x7c\xc7\xe5\xa5\x79\x46\x18\xff\xab\xe6\x3b\xde\x37\xff\x95\xbe\x35\xfc\xba\xde\xab\xf0\x95\xdf\xca\x77\x55\xf9\xae\xca\xf9\xae\x2a\x67\xd2\x07\x74\x26\x15\xdb\xa3\xae\x4b\xb1\xb3\x31\x16\xd8\x55\x20\xde\xcd\x1e\xf5\x8f\xa9\x54\x64\xb8\x30\x4d\x03\x53\x7e\xcf\xf7\xe5\xf0\x97\x5f\x2b\x27\xcb\x9b\x3b\x59\xde\xdd\x36\x2f\xcf\xf1\x80\x19\x51\xe2\x09\x53\xed\xce\x32\x08\x14\x7d\x1f\x6b\x29\xf8\x7a\x4a\xf0\x07\xe8\x88\xec\x47\x02\xf6\x7a\x67\x96\x3f\x27\x56\x1c\xca\xbe\x66\x93\x2d\x0b\x52\x3a\x99\xec\xd3\xf1\x8c\x39\x82\xd9\xdd\x7d\xb3\xbc\x9e\x28\x7b\xc7\x8a\x3e\xd8\xb6\xf7\x47\xf5\x62\x26\xd8\x67\xbd\xe9\x40\xef\x0d\x3f\xa6\x79\xf6\x81\x96\xcf\xce\xdd\x26\xf9\x13\xa7\x6e\x2d\x9e\x2e\x60\x8f\xb0\xd1\x0d\x60\x46\xd8\x48\xbe\x87\xe5\xf3\x96\x27\x50\xc5\x52\xb2\x16\xd6\x18\x19\x76\x5e\xb6\x86\xf8\xd0\x72\x19\x7b\x9e\x21\x19\x13\x59\x32\xe3\xb1\xe8\x97\x66\xc9\x96\xa6\x5c\xa2\x79\xf9\xa6\x5b\x95\x9c\x5b\x8c\x04\xe5\x74\x4e\x5c\xd5\x85\x61\xe6\x63\xf9\x7b\xb9\xfd\xd8\x87\x5c\xb0\x40\x29\xf1\x25\xf9\xa7\x8e\xe6\xf6\x3c\x5a\x68\x20\x39\x1e\xc9\x2f\x6c\xe7\x6d\x38\xd8\x69\xea\x84\xe7\x7f\x4b\x6d\x2f\x17\x48\xf2\xdb\x68\xe7\xcf\x97\x09\x04\x0c\x41\x00\x73\x4d\xde\xa0\xaa\xac\x6c\xab\xf1\x4b\x25\x93\x5f\x56\x26\xff\xd7\x14\xc4\xe2\x8c\x7b\x50\x49\xe5\x4a\x2a\x47\x8a\x7e\x74\xa9\xac\x57\x3e\x72\x83\xa5\x5f\xc9\xe2\xe4\x9a\xcf\xb2\x38\x83\x39\x3e\xf4\x49\xff\xf1\x27\x7d\xf1\x6a\x88\x5d\x68\xd4\xfe\x15\x00\x00\xff\xff\x28\x6a\x8e\xb3\x1c\xb5\x00\x00")

func dataGjishoGladeBytes() ([]byte, error) {
	return bindataRead(
		_dataGjishoGlade,
		"data/gjisho.glade",
	)
}

func dataGjishoGlade() (*asset, error) {
	bytes, err := dataGjishoGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gjisho.glade", size: 46364, mode: os.FileMode(436), modTime: time.Unix(1593800902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/gjisho.glade": dataGjishoGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"gjisho.glade": &bintree{dataGjishoGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

