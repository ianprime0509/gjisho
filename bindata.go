// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/gjisho.glade
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGjishoGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xef\x76\xe2\x38\x96\xff\xce\x53\x68\xfd\x61\x4e\xf7\xd9\x90\x4a\x55\xf5\xcc\xf6\xcc\x24\xcc\x92\x84\x24\xee\x4a\x20\x0b\x4e\x67\xeb\x13\x47\xd8\x17\x50\xc5\x48\x5e\x49\x40\x31\x67\x5f\x68\x5f\x63\x9f\x6c\x8e\x65\x93\x60\xf0\x1f\xf9\x0f\x09\xa9\x76\x7f\xe9\x8a\x91\x7e\x96\xae\x75\xff\xe8\xea\x5e\xdd\xd3\x7f\x7c\x9f\xb9\x68\x01\x5c\x10\x46\xcf\x8c\x8f\xc7\x27\x06\x02\x6a\x33\x87\xd0\xc9\x99\xf1\x60\x5d\x35\x7f\x35\xfe\xd1\x6a\x9c\xfe\x5b\xb3\x89\xae\x81\x02\xc7\x12\x1c\xb4\x24\x72\x8a\x26\x2e\x76\x00\x7d\x3e\xfe\xfc\x97\xe3\x13\xd4\x68\x58\x53\x40\x77\xa6\x85\x6e\x89\x0d\x54\x00\xfa\xe9\xce\xb4\x7e\x6e\x34\x2e\x98\xb7\xe2\x64\x32\x95\xe8\x27\xfb\x67\xf4\xe9\xe4\xd3\x09\x32\x31\x45\xbf\xb1\x29\x15\x8c\x36\x1a\xf7\xc0\x67\x44\xf8\x6f\x47\x44\xa0\x29\x70\x18\xad\xd0\x84\x63\x2a\xc1\x39\x42\x63\x0e\x80\xd8\x18\xd9\x53\xcc\x27\x70\x84\x24\x43\x98\xae\x90\x07\x5c\x30\x8a\xd8\x48\x62\x42\x09\x9d\x20\x8c\x6c\xe6\xad\x1a\x6c\x8c\xe4\x94\x08\x24\xd8\x58\x2e\x31\x07\x84\xa9\x83\xb0\x10\xcc\x26\x6a\xdc\x0e\xb3\xe7\x33\xa0\x12\x4b\xff\x7d\x63\xe2\x82\x40\x3f\xc9\x29\x20\x63\x10\xf6\x30\x7e\x56\x2f\x71\x00\xbb\x0d\x42\x91\xff\xdb\xfa\x27\x35\x6b\x36\x97\x88\x83\x90\x9c\xd8\x3e\xc6\x11\x22\xd4\x76\xe7\x3e\xb5\x9e\x7f\x76\xc9\x8c\x84\x6f\xf0\xbb\xab\xc9\x8b\x86\x64\x68\x2e\xe0\x48\x8d\xf3\x08\xcd\x98\x43\xc6\xfe\xff\x41\x4d\xcb\x9b\x8f\x5c\x22\xa6\x47\xc8\x21\x3e\xf4\x68\x2e\xe1\x08\x09\xff\xa1\xa2\xe5\x91\x3f\x8f\x0f\x8c\x23\x01\xae\xdb\xb0\x99\x47\x40\x20\x35\xd7\x97\xd1\xa9\x36\xfe\xd0\x3d\x9f\xa0\x32\x24\x91\xf0\x9f\x2c\xa7\x6c\x16\x9d\x09\x11\x8d\xf1\x9c\x53\x22\xa6\xa0\xfa\x38\x0c\x09\xa6\xde\xf8\x0d\x6c\xe9\x3f\xf1\x9b\x8f\x99\xeb\xb2\xa5\x3f\x35\x9b\x51\x87\xf8\x33\x12\x7f\x0b\x3e\x34\x1e\xb1\x05\xa8\xb9\x04\xdf\x96\x32\x49\xec\x80\xdc\xea\x03\x78\x2f\x5f\x35\xfc\x49\x4c\xb1\xeb\xa2\x11\x84\x04\x03\x07\x11\xda\xf0\x1f\xad\xa7\xc3\xfd\xd7\x0b\x89\xa9\x24\xd8\x45\x1e\xe3\xea\x7d\xdb\xd3\x3c\x6e\x34\xac\x9b\x0e\x1a\xf4\xae\xac\xc7\x76\xbf\x83\xcc\x01\xba\xef\xf7\x7e\x37\x2f\x3b\x97\xc8\x68\x0f\x90\x39\x30\x8e\xd0\xa3\x69\xdd\xf4\x1e\x2c\xf4\xd8\xee\xf7\xdb\x5d\xeb\x2b\xea\x5d\xa1\x76\xf7\x2b\xfa\x62\x76\x2f\x8f\x50\xe7\xbf\xef\xfb\x9d\xc1\x00\xf5\xfa\x0d\xf3\xee\xfe\xd6\xec\x5c\x1e\x21\xb3\x7b\x71\xfb\x70\x69\x76\xaf\xd1\xf9\x83\x85\xba\x3d\x0b\xdd\x9a\x77\xa6\xd5\xb9\x44\x56\x0f\xf9\x2f\x0c\xa1\xcc\xce\xc0\x07\xbb\xeb\xf4\x2f\x6e\xda\x5d\xab\x7d\x6e\xde\x9a\xd6\xd7\xa3\xc6\x95\x69\x75\x7d\xcc\xab\x5e\x1f\xb5\xd1\x7d\xbb\x6f\x99\x17\x0f\xb7\xed\x3e\xba\x7f\xe8\xdf\xf7\x06\x1d\xd4\xee\x5e\xa2\x6e\xaf\x6b\x76\xaf\xfa\x66\xf7\xba\x73\xd7\xe9\x5a\xc7\xc8\xec\xa2\x6e\x0f\x75\x7e\xef\x74\x2d\x34\xb8\x69\xdf\xde\xfa\xaf\x6a\xb4\x1f\xac\x9b\x5e\xdf\x1f\x1f\xba\xe8\xdd\x7f\xed\x9b\xd7\x37\x16\xba\xe9\xdd\x5e\x76\xfa\x03\x74\xde\x41\xb7\x66\xfb\xfc\xb6\x13\xbc\xaa\xfb\x15\x5d\xdc\xb6\xcd\xbb\x23\x74\xd9\xbe\x6b\x5f\x77\x54\xaf\x9e\x75\xd3\xe9\x37\xfc\x66\xc1\xe8\xd0\xe3\x4d\xc7\x7f\xe4\xbf\xaf\xdd\x45\xed\x0b\xcb\xec\x75\xfd\x69\x5c\xf4\xba\x56\xbf\x7d\x61\x1d\x21\xab\xd7\xb7\x9e\xbb\x3e\x9a\x83\xce\x11\x6a\xf7\xcd\x81\x4f\x90\xab\x7e\xef\xee\xa8\xe1\x93\xb3\x77\xe5\x37\x31\xbb\x7e\xbf\x6e\x27\x40\xf1\x49\x8d\x22\x5f\xa4\xd7\x57\x7f\x3f\x0c\x3a\xcf\x80\xe8\xb2\xd3\xbe\x35\xbb\xd7\x03\x64\x76\x23\x9f\xef\xb8\xd1\x68\xcf\xe5\x94\xf1\xbf\x6d\x0a\x05\x74\x4a\x30\xf5\x38\x99\xc1\xc9\x9f\x4f\xfe\xfa\x9f\x93\x19\x26\xee\xb1\xcd\x66\xad\x46\xa3\xd9\x6c\x35\x4e\x09\x95\xc0\xc7\xd8\x86\x56\x03\xa1\x53\x0e\xff\x33\x27\x1c\x04\x72\xc9\xe8\xcc\x98\xc8\xa7\x7f\x37\x5e\xe4\xd9\xe7\xe3\x4f\x9f\x8c\x0f\xaa\x9d\x2f\xc1\x9e\x7b\x36\x43\xce\x6a\xca\x95\x07\xc8\xe7\x17\x1f\x79\xa7\x15\xc5\x33\x40\xd7\xbf\x11\x31\x65\xf1\x0d\x1c\x10\x36\x27\x9e\x62\xf6\x36\xfa\x0d\x7b\x98\x82\x00\xe4\x04\xd2\x01\xf3\x15\x1a\x33\x8e\xae\xbb\xbd\xbb\xce\x71\x3c\xc2\x0b\x0f\x6d\xcb\xc6\xf8\xf6\x58\xd1\x4b\x68\xd1\x6b\x8d\xc0\x02\xb6\xb6\x5d\x2c\xc4\x99\x71\x2d\x9f\xee\x99\xc7\x16\xc0\xef\x80\xce\x0d\x44\x9c\x33\x63\x86\x09\x55\x7f\xf9\xed\x11\x3a\xf5\x38\xf3\x80\xcb\x15\xf2\x29\x70\x66\xd8\x98\x0e\xc7\xcc\x9e\x0b\xa3\x75\x85\x5d\x01\xa7\x1f\xd6\x0d\xc2\xf6\xf6\x94\xb8\x4e\xf0\xef\xb8\xf7\x9d\xb3\xef\xc6\xfa\xd7\x5d\xf4\x05\x11\x64\xe4\x82\xd1\xb2\xf8\x7c\x07\xba\xc8\x70\xe2\xfa\x30\x4e\xd6\x82\xdf\x68\x2d\x80\x4b\x62\x63\x37\xb6\x63\x64\x2e\xf1\xf3\xb9\x63\x0e\xb8\xe7\x73\x29\x7d\xb0\x8d\x96\x05\xe6\x96\x31\xbf\x3c\xdd\x38\xd8\x40\x16\x20\x86\x0e\x8c\xf1\xdc\x95\xf9\x7a\x63\xb5\x64\x87\xfe\x1f\x46\x0b\x7b\xde\x31\x1e\xb1\xb9\xd4\xed\x2d\xe1\xbb\x34\x90\xe4\x98\x0a\x17\x4b\x3c\x72\xe1\xcc\x58\x81\x30\x5a\x6d\x1f\x25\xe4\xa1\x78\xb0\xd3\x0f\x01\x7d\x23\xcf\x3c\x6c\x3f\x11\x3a\x49\x7f\x29\x7c\xf7\x30\x75\x52\x16\x41\x5c\xa7\x31\x71\xdd\x7c\x94\xf1\x98\x20\xc1\xba\xf9\x94\x34\x83\x9d\xe1\x9e\x7e\x88\xb2\xc4\xd6\x1c\x77\xe7\xb7\xfd\x52\x31\x1f\xcd\x14\x43\xfa\xac\xa9\xb3\xc0\x5f\x46\xf9\x71\xb7\xf9\xd6\x08\x37\x46\xb7\x39\xb2\xdd\x85\xde\xf6\x3c\x97\xd8\x8a\x6b\x1e\x09\x75\xd8\x32\x10\x17\xd8\xf3\xc2\x3f\x0b\xca\x8b\xed\x0f\xb9\x00\x2a\x85\xd1\xba\xbe\xfc\x32\x3c\x7f\xb0\xac\x5e\x77\xa8\x74\xf4\xf0\xae\x3d\xf8\x82\xfe\x17\xf9\xcf\xbf\x74\xbe\xee\x3e\x1c\x58\xfd\x87\x0b\xeb\xa1\xdf\x51\x0f\xb3\x5e\x13\xf2\xc5\x70\x49\x1c\x39\x35\x5a\xbf\x9e\x9c\xe8\xf6\x98\x82\x2f\xa2\x8d\xd6\x5f\x62\xba\x08\x32\xa1\xd8\x0d\x3b\x8c\x94\x50\x68\x7a\x1c\x84\x68\xaa\x69\x19\x68\x8a\xa9\xe3\x02\x3f\x33\x96\x8a\x66\x81\xdc\xb8\xf7\x5b\x18\x48\x2c\xb1\xe7\x81\x73\x66\x50\x16\xe8\xa9\x6d\xc0\x27\x58\xa5\xa2\x7d\x81\x55\x0a\xd4\x01\xca\x65\x0d\xf1\xda\x87\x05\x60\x17\x78\xb0\xd8\x04\x60\x6e\x4f\x9f\x9f\xed\x57\xde\xe6\x12\x25\x4a\xdc\x29\xa6\x1b\xfa\x76\x84\xd1\x12\x2e\x71\xa0\xa9\xd4\x79\x22\xc6\xce\xfc\x75\x3e\x4d\xd2\x08\xd4\x4a\x1e\xfa\x26\x10\x08\x69\xb4\x3e\xef\x2e\xcf\xd2\xc4\x2a\x43\xb0\xb8\xbe\xda\x8a\x38\x9d\x62\x79\xa8\x56\x6a\xee\x65\xe7\x5f\x09\x0d\xd2\xe9\x10\x4f\x8b\x81\xe2\x9b\x0e\x95\x7c\xb5\xc9\x48\xc1\x83\x24\x98\x92\x84\xca\x20\x56\x51\x88\x19\xe6\x13\x42\x87\x42\x62\x2e\x8d\xd6\x9f\x4b\x40\x80\x6f\x2f\x94\x01\x90\xcc\x2b\x07\x30\x62\x52\xb2\x59\x41\x0c\xdf\xca\xc7\x7c\x35\x24\xf6\xb3\xa9\x06\x0e\x91\xcd\x31\xa1\x4e\x53\xac\x66\x23\xe6\x12\xbb\x34\xb0\x6f\x0a\x2e\x02\x2b\x4e\x73\x81\x67\x42\x0a\x50\x92\x72\x91\x0b\x50\x53\x11\x6e\xac\xeb\x54\x6d\x98\xfd\x8e\x00\xa9\x69\x4f\x31\x9d\x80\xb3\xf3\x8a\x8b\xf5\x73\x2d\xf0\x38\xbb\x36\x4a\xaf\x38\x1b\x37\x8d\xa2\x5a\xf6\x6e\x1a\x40\xb6\xed\x9b\xd6\xfb\xc5\xc2\x4c\xd5\x32\xeb\xd9\xa7\x4e\x6f\xcb\x3e\x8e\xfe\x94\x4c\xb7\x74\x9a\x95\xa2\x57\x71\x5a\x15\xa6\x53\x0a\x8d\x12\xe9\x93\x47\x1b\x0e\x6c\xce\x5c\x17\x9c\x88\xad\x9e\x35\xfa\xaa\x14\x63\x91\xee\x53\xa1\x46\x3c\xc2\x7c\xe8\xf9\x92\x6c\x65\xb4\x28\x2c\x80\x67\xe2\x44\xb8\x18\x9c\x09\x34\x39\x60\x7b\x1a\xc3\xc3\x7d\x10\x73\x57\x8a\x8e\x33\x81\xfe\xba\x89\x06\x3b\xe7\x55\xbe\xbf\x13\x58\x7a\xcc\xd7\x56\x6f\xa2\x68\x0b\x4b\x08\x31\xc5\x0e\x5b\x86\xe6\x2c\x65\x54\x0f\x24\x95\x38\xf1\x04\xba\x25\x42\xfa\xd6\x5a\xc4\xc4\x57\x9f\x26\x85\x64\x95\x90\xad\x2a\xd2\xc5\x92\x0f\x5c\x08\xfc\x28\x33\xe6\x80\xd1\x1a\x71\xb6\xcc\x81\x16\x59\xc6\x9c\x2d\x9b\x01\x5e\xf2\x32\xee\xb3\xe5\xe0\xb9\x89\xa6\xca\xcb\xd6\x4c\xa9\xe2\x39\x1b\xe0\x55\x65\x7b\x11\x31\x53\x85\x68\x8f\x71\xb2\x44\x27\x9a\x57\xb4\xc7\x93\x26\xa6\xf1\x3b\xf2\x97\x25\xe8\xbf\x6c\x7f\x99\x9e\x9f\x60\x00\x1e\xe6\x58\xb2\x37\x74\x0a\xbc\xa3\x8f\x91\xb0\x62\xab\xfa\x18\xbb\x5b\xef\x37\xf5\xcd\xe4\xda\x62\xeb\x3a\x65\x32\x0d\xaa\x7d\x78\x58\xf2\x76\x2d\x62\x44\xe5\xb1\x2a\x33\x4c\x9b\xb7\x75\xb4\xe4\x34\xd3\x92\xfd\x45\xa5\xa7\x52\xc5\x74\xe2\x30\x0a\xf9\x8e\xb2\x69\x13\x4f\x9f\x5b\x3c\x02\x37\xb0\xd1\xc2\xed\xfc\x17\x4c\x71\xf0\xf4\x3d\x99\x69\x58\x86\x61\x15\x22\xbd\xe1\x66\xd3\xb5\x49\x67\x63\x17\x0c\xb4\xc0\xee\x1c\xce\x8c\x8f\xc7\x9f\xd2\x6d\x2b\x5f\x7a\xea\xbe\xed\x54\xc8\x95\x0b\x99\x23\x52\x9f\x23\xea\x54\x69\x3e\x61\x8a\xb3\x07\x92\x89\x9f\x6d\x09\xea\xf8\x29\x50\x15\xbe\x8a\x38\x90\x7c\xfe\x8a\x38\x84\x5c\x3e\x0b\x94\xed\xb7\x40\xd9\xc6\x71\x85\x9c\xf6\x8d\xfc\xa1\x59\xed\x3f\x3e\xfd\x7a\x28\xcc\xf6\x8d\xd4\xdc\x96\x8d\xa0\xbd\x3d\x7a\xa1\xc8\x9b\x73\x1b\x50\xc9\x57\x97\x20\x31\x71\xc5\xfb\xe3\xb6\xf2\x07\x25\x29\x30\xfa\x87\x25\x29\x20\xea\xc0\xe4\xa3\xa6\xf4\xad\xe6\xd4\x24\x0e\x67\xc9\xb1\x57\xee\x1b\x7d\xc7\x2e\x99\xe8\x2b\x92\x6d\x77\x4e\x78\xa8\x02\x4d\x97\xd0\xa7\x0d\x7f\xce\xfa\xf9\xad\x7a\xac\xed\xc3\x29\x24\xd0\xd4\x5a\x6f\x3a\xc1\x62\xaf\x05\x5a\x36\x42\x66\xe8\xcf\x2e\x45\x5e\x45\xa0\x79\x2e\xb6\x61\xca\x5c\x07\x78\xda\xe1\xd6\xab\x7b\xf1\x72\xf9\xb6\xd2\xd6\x46\x51\x77\x5f\xb1\x25\x50\xc8\x6a\x4c\xf8\xd4\xb1\x24\xd0\x75\x30\x44\x23\x5f\x66\x8c\x83\x49\xc7\x2c\x21\xf6\x25\x6e\xe4\x6f\x12\xd2\x91\x10\x07\x33\xf7\x5e\x3f\xac\x23\x08\xd4\xd2\x8e\x88\x29\x45\xc2\xb2\x64\x8c\xeb\xff\x4a\x91\x21\xf1\x7e\xd3\xca\xa8\x52\x05\x65\xea\x03\xf4\xa2\x07\xe8\x05\x16\x84\xc4\xf6\xd3\x60\x49\xa4\x3d\x8d\x95\x32\x49\x13\x3a\x08\x87\xd8\x34\xb4\xcb\x6c\xa0\x32\xfb\xa8\x38\x0e\xa1\x0e\x2f\x5a\x6f\xc0\xfd\x75\x60\xb4\xd6\x7a\x47\x2d\x8b\x3f\x34\x9f\x6a\x6c\x63\x5f\x9d\x4f\xa3\xb6\x41\xf0\xe8\xd0\x59\xb6\xc0\x16\x5d\x2b\x78\xa5\xb2\x59\x66\xcc\xb4\x0c\x4c\xd1\xa0\x16\x7d\xe2\xc5\x13\x50\x23\x04\x25\x69\xc8\x85\xc8\x17\x07\x54\xd4\xaf\x11\x87\x55\x28\x34\xe5\x19\x4c\x8b\x88\xa8\xc0\x21\x51\xda\x90\x0b\xd3\x31\x0e\xac\x0c\x2d\xe3\xf0\x0a\x1f\x24\x45\x40\xb5\xe9\x8a\x52\x1c\x71\xba\xfd\x2b\xa6\x70\x1c\x60\x59\x2a\xc7\x61\x16\xf4\xca\xa5\x41\xba\x81\x03\x33\x26\xe1\x4a\x1d\x1b\xa0\x25\x27\x92\xd0\x89\xa8\xe2\x5d\xb9\x1d\x5f\x11\x30\xfd\xf3\x80\xf8\x6e\x6b\xff\x5d\x90\x81\xb3\x3e\x1c\x18\x31\xd7\xc9\x72\x60\x65\x20\x6e\x9f\x36\xfc\xf2\xf9\xaf\x91\xff\xf2\xc0\xeb\x1f\x43\x6c\xf6\xc9\x76\x9e\x45\xda\x6b\x39\xd2\xa2\x3d\x2a\x70\xaa\xa5\x01\xe6\x77\xb0\xa5\xa1\xe5\x3e\xab\x8b\x80\x65\x3b\xde\xa2\xcd\x73\x08\xae\x6a\x84\x9c\x32\xdb\xd4\x51\xd2\x63\xc8\x9c\xb5\xf0\x2b\x06\x99\xdf\x97\x9f\x86\x76\x10\xe2\x2d\x77\x94\x41\x04\xad\x96\x3e\x55\x4a\x1f\xcd\xb3\xcb\x08\xd8\xc1\x4b\x9f\x5a\xca\x14\x84\xd4\xf7\xc8\x64\x01\xa6\xda\x6c\xb8\x36\xd9\xb2\x11\x6b\x93\xed\x60\x85\xa6\xe6\xf9\x68\x04\xec\xe0\x85\xe6\xda\x64\xc3\xb5\xc5\x56\x5b\x6c\xb5\xc5\x76\xb0\xc2\xe7\xf3\x21\x09\x1f\xfd\xef\xa4\x09\xaa\x07\xa8\x01\xb6\xbf\x70\x1d\xaa\x52\xd1\xf3\x5a\x30\x3b\x71\x04\x44\xfa\x2c\x15\x63\x20\x3d\xe6\x42\x7e\xab\xa8\xc2\xfa\xc8\x42\x9b\x78\xf1\x04\xac\x8f\x2c\x36\xc1\x4a\x1c\x59\x44\xb2\x6b\x95\xcf\xc9\x7f\xf2\x23\x9e\x62\x6c\x67\xdc\xe6\xa5\xb2\xc2\xdc\xc9\xbb\x5d\x07\x65\x6e\x26\xde\x3e\x93\xb1\xcf\x96\xed\x97\xdf\x73\x44\x6c\x3e\xbf\x4f\x7d\x59\xe4\x2f\x8b\x33\x63\x23\x94\x4f\xdb\xb0\xfc\x83\x6e\xf2\x93\x37\xd0\x5d\x86\xd4\xe7\xa9\x0d\xc2\x94\xd6\xb5\x05\x13\x69\x15\x67\xc1\xe4\x5a\x44\xfa\xe6\xcb\x97\x32\xb0\xef\x26\xa9\xa2\x36\x7f\xd6\x78\x3a\xd7\x91\xc0\x77\x3c\xf3\x5c\xc8\x7d\x13\xc9\xf3\x4b\x6a\x1b\xeb\x80\x6c\xac\xf5\xd7\xac\xcd\xac\x14\x4c\x2d\x33\x2b\xa4\x64\x6d\x68\x69\x02\xbe\xba\xa1\xb5\x5e\xea\xb5\xad\x95\xd2\xba\xb6\xb5\x22\xad\xe2\x6c\xad\xbc\xeb\x48\xdf\xdc\xea\x94\x44\x7e\x83\xac\xaf\xfd\xc5\x50\x17\x8d\xf3\xad\x2a\x84\x5a\x83\x84\xfb\xb8\x2b\x70\xef\x99\x68\xb9\xb3\xa4\xca\xa6\xa2\xa5\x58\xff\xfb\x48\x45\x6b\x2b\x75\x7f\x8e\x0f\x27\xeb\x2c\x4f\xc2\x58\x70\x37\xbf\x32\xcd\x46\xd8\x7e\x8a\xbd\xab\xbf\xf4\x6c\xe2\x3a\xe7\xbd\xe8\xb4\xe4\x16\x66\xbb\x7b\xbe\x1a\x00\xcf\x28\x11\xcb\xcc\x76\x89\xfd\x14\xb1\xc9\x28\x5e\x90\x09\x96\x70\xae\xd2\x0f\xf6\x70\x5d\xa2\x39\xc3\x13\x38\xf8\x2c\x86\x2d\x8c\x8d\x4b\x78\x27\xac\xe9\x71\x58\x10\x36\x17\x39\xae\xe1\x3d\x80\x6b\xf4\x0e\xe6\xae\xd2\x4d\x8e\x1d\x33\xbe\xc4\xdc\xa9\x99\xb6\x12\xa6\xbd\x0a\xa8\x59\xf3\x6d\x3c\xdf\x52\xf8\x2e\xdf\x2b\xcf\x56\x7e\x09\x65\x3e\x9e\xb5\xd8\x64\xe2\xc2\x26\xe7\xae\xb3\xd2\x22\xbf\xbc\x02\x03\x1f\x00\x03\x4a\x35\xe5\x4d\x06\x8c\x12\xa3\xe6\xbf\x18\xfe\x5b\x10\x58\x36\x7d\x3a\xbd\x33\x0e\xc4\xf6\x53\xe8\x71\x04\xea\xe4\x5d\x6d\x7b\xd4\xb9\xef\x78\x7b\x93\xb2\x4f\xd4\xdf\xde\x94\xbf\x8e\x35\xcf\xdd\xa4\x07\x50\x4a\x2a\xf2\x63\xc4\xdd\xa9\xdc\x23\xa3\x8d\xed\xdb\xae\xf4\xb8\x01\xec\x00\x8f\x6e\xf1\x72\x4b\x8c\x22\x12\x42\xdf\x95\x93\x5c\x38\x6c\xf7\x1c\x80\x2d\x87\xb6\xcb\x04\x0c\x47\xa1\xde\x49\x1c\xb2\xc6\x75\xb6\xbb\xba\x2d\xb8\x78\x3b\x45\xb3\x15\x12\xb6\x05\x35\x59\x39\x0d\x96\xa5\xb9\x36\xa7\x9a\xaa\xb7\x74\x9d\x09\x49\x7a\xea\x6d\x1c\x09\xc9\xfa\x28\x4f\x31\x95\x12\x17\x76\x17\xba\x60\xf9\x0e\xe8\xfc\xe0\xd6\x9d\xea\x32\x64\x74\xa8\xf6\x1f\x39\xef\x68\x2e\x57\xb0\xd0\x0b\x8a\x58\x06\x15\xf2\x7c\xe2\x24\x76\xfc\xc1\x16\x29\xf3\x80\x36\x67\x40\xe7\xfb\x5d\xa4\xba\x9a\x53\xcf\x18\xca\xbd\x89\x29\xa1\x09\x33\x6a\x1a\x8e\xd8\x5c\x5e\x12\xec\xb2\x49\x58\xcd\x70\xe3\x41\x88\x95\xf3\xc3\xed\x2e\x6c\x41\xfe\x99\x52\x3e\x69\x27\xe2\x9e\x39\x38\xc1\x92\xd8\x51\x95\x2b\x0f\x86\x53\x42\xa5\xd1\x72\xd4\x90\x33\x3b\xa8\xcb\xb9\x80\xca\xe1\x98\x71\x55\xd9\x33\x88\xcf\xc8\xea\xe7\x71\x36\xe1\x78\x16\xae\xb9\x78\x3d\xbc\xc3\x19\x41\xdd\x5d\xa3\x75\x72\xfc\xf1\x38\xb3\xb8\xe2\x73\xe9\xdb\x58\xcd\xff\x52\x38\xfc\xff\xff\x6f\xa7\x36\x6e\x36\xf4\x6c\xa6\x4a\x4a\xc6\x96\x24\xcd\x28\xd4\x9b\x05\x1e\x96\xe0\x35\x5a\x9b\x35\x78\xff\xe4\xca\xbf\xc7\x97\xe1\xfd\xd3\x44\xfe\x3d\x0b\xd2\x65\x13\xb6\x59\xd4\x8b\xf8\xa2\xa8\xa9\x4a\x68\xd3\xcc\x2f\x1c\xd6\x32\x0e\x79\x70\x46\x64\xf3\xfb\xc7\x1d\xa6\x8a\xaa\x7c\x07\x5c\x90\xb0\x53\x49\x6b\x4a\x1c\x78\x24\xce\x04\xa4\x46\x65\xca\x04\x0c\x42\xa7\x64\x44\x64\x57\x15\x84\xcd\x04\xe1\x20\x3c\x46\x05\xe4\x18\x44\x60\xe4\xaa\x8a\xc8\x14\xbb\x4d\xf5\xe7\x99\xb1\x18\x6d\xdc\xd2\x91\xb7\xd2\xe5\x7e\x0b\x0a\x6f\x1b\xaa\x1e\xb6\x09\x9d\x24\x6c\x01\x12\xa6\x17\x56\xe7\xc5\x1c\xb0\x91\x6e\x26\x04\x26\x42\x76\x35\x86\xa2\x85\x15\x5c\xbc\x62\x73\x39\x54\x77\x83\xa6\x4b\xfc\x78\xb5\x9b\x7c\x75\x65\x9e\xe3\xaa\x5c\x28\x6f\x52\xa4\x23\x57\x97\x7d\x95\x4c\x89\x27\x53\x65\x3b\xca\x5d\x78\x6d\x2d\xbc\x59\x4e\x38\x8c\x04\x08\x2f\x61\xae\xb4\xb2\x70\x66\x90\x00\x0a\x6f\xc3\xad\x50\x45\x6f\x95\x19\x8e\xab\x19\x9c\xd0\x23\xad\xcc\x70\x51\xb5\x7e\x30\x72\xff\x00\x6b\x11\x57\x2e\xd2\x3f\xc6\x66\x4b\xea\xec\xee\x36\x6f\x24\x8f\xb0\xc3\xda\x56\x89\x0b\x3c\xab\x7a\xe7\x97\x4b\x66\x69\xa6\x89\x26\x74\x4b\xbf\x29\x71\xbb\x53\x76\xfe\xe8\x76\x8f\xcc\x1c\xd1\x94\x50\xb4\x22\x85\x09\x92\x82\xca\xde\x51\x81\xa8\x3d\x57\xeb\x4a\x5c\xe1\x1d\x3a\x71\x89\x98\xd6\x0b\xfc\x70\x16\x78\xd6\xc5\x0a\x3f\xc0\x6a\xdf\x73\x39\xb4\xd4\x64\x88\xb7\xf4\xd8\xe5\x4d\x6e\xd0\xf5\x9e\xa5\xe4\x15\x1c\x84\x03\x2d\x57\x9e\x40\x9e\x53\xf0\xb8\x3c\x80\xb5\x29\xcb\xb8\x93\x96\x12\xb0\xaf\x33\xf0\x42\x41\x2c\x45\x42\xfc\x73\x85\xf4\x6f\x10\x25\x4f\x58\x7f\x45\x31\x9e\xf5\x69\xe1\x9b\xec\xed\x54\x46\xdd\xeb\xee\xec\x82\x1b\x30\xeb\x7d\xdd\x61\xec\xeb\x12\x15\x61\x95\x5b\x3c\xdd\x2e\x79\x94\x9f\x8e\x96\x4f\x50\x7a\x6f\x6a\xb6\x6a\x2b\x3a\x5d\xcd\x1e\x7f\xff\xf1\x41\x28\xf5\xdc\x77\x18\xe7\x52\xec\x5b\xd7\x76\x86\x52\xec\x62\x8a\x39\xb6\x25\xf0\xb4\x54\xb0\x83\xd2\xec\xdf\xe6\x42\x92\xf1\x4a\xb7\x44\x82\x46\x92\x56\xc6\x06\xe2\xd3\xf1\x2f\xbf\x26\x96\xee\xcb\x4a\xbf\xaa\xbe\x46\x78\x21\xa2\x55\x51\x24\xfc\x8d\x63\xaa\xb5\x12\xb2\x0f\x29\x0e\x73\x51\x30\xf1\x3a\x6f\xd8\xa4\x46\x0e\xf4\x41\x46\x4e\x16\xca\x75\x2e\x92\xca\x1f\xbd\x3b\x26\x14\x7c\x03\xc9\xd9\x13\xf4\x78\x76\x02\x6d\x69\xe2\x55\x45\xc0\x38\x9c\xfc\xf5\x62\xe2\x50\x0e\xb5\xd2\x62\x59\x90\xd2\x85\x16\x9f\x7d\xe1\xfa\x08\x7a\x79\xad\x7a\x35\xef\x50\x9a\xf0\xdc\x6c\x92\x95\xdc\xfa\xfa\xc5\xf3\xde\x9d\x7a\x7b\xe3\xf4\x83\x04\xfb\x6c\x30\x1f\xa9\xbd\xe1\x8f\x69\x9e\xfd\x40\xcb\x27\x23\x33\x78\xef\x19\x67\x71\x3a\xae\x0f\xd8\x21\x74\x72\x07\x98\x12\x3a\x11\xef\x61\xf9\xe4\xd4\x44\xa5\x34\x50\xe9\xfd\x57\x1c\x88\xbe\xc6\xc8\xb0\xf3\xb2\x35\xc4\x0f\x2d\x97\xb1\xe3\x68\x92\x31\x91\x25\x33\x2e\x52\xdd\x37\x4b\x76\x14\xe5\x12\xcd\xcb\x37\xdd\xaa\xe4\xdc\x62\x24\x28\xa7\x4b\x62\xcb\x3e\x8c\x33\x2f\x92\x3e\xc8\xed\xc7\x21\xd4\x49\x04\xd7\x25\x9e\x20\xff\x54\x91\x8e\x8e\xe3\x16\x9a\x48\x8e\x0b\xa4\x0b\xdb\x79\x5b\x0e\x76\x37\xf5\x83\xe7\xbf\x67\xe8\x20\x17\x48\xf2\xbd\x41\x97\x2f\x81\xb6\x1c\xc6\xc0\x81\xda\x3a\xf7\xb3\xd4\x56\xb6\xd1\xfa\xa5\x96\xc9\xfb\x95\xc9\xff\x35\x07\xbe\xba\x60\x0e\xd4\x52\xb9\x96\xca\x91\xa6\x3f\xba\x54\x56\x2b\x1f\xd9\xfe\xd2\xaf\x65\x71\x72\xcf\x17\x59\x9c\xc1\x1c\x55\x25\x6c\x17\x49\x22\xdc\xfb\x49\xff\xe9\x07\x95\x94\x30\xc6\x36\xb4\x1a\xff\x0a\x00\x00\xff\xff\xb8\xaa\x58\xcd\x38\xb0\x00\x00")

func dataGjishoGladeBytes() ([]byte, error) {
	return bindataRead(
		_dataGjishoGlade,
		"data/gjisho.glade",
	)
}

func dataGjishoGlade() (*asset, error) {
	bytes, err := dataGjishoGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gjisho.glade", size: 45112, mode: os.FileMode(436), modTime: time.Unix(1593376938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/gjisho.glade": dataGjishoGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"gjisho.glade": &bintree{dataGjishoGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

