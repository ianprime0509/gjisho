// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/gjisho.glade
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGjishoGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xef\x76\xe2\x38\x96\xff\xce\x53\x68\xfd\x61\x4e\xf7\xd9\x90\x4a\x55\xf5\xcc\xf6\xcc\x24\xcc\x92\x84\x24\xee\x4a\x20\x0b\x4e\x67\xeb\x13\x47\xd8\x17\x50\x47\x48\x5e\x49\x40\x98\xb3\x2f\xb4\xaf\xb1\x4f\x36\xc7\x32\x24\x18\xfc\x47\xb6\x49\x42\x52\xee\x2f\x5d\x31\xd2\x4f\xd2\x95\xee\x1f\x5d\x5d\xe9\x1e\xff\xe3\x71\x42\xd1\x0c\x84\x24\x9c\x9d\x58\x9f\x0f\x8f\x2c\x04\xcc\xe5\x1e\x61\xa3\x13\xeb\xce\xb9\xa8\xff\x6a\xfd\xa3\x51\x3b\xfe\xb7\x7a\x1d\x5d\x02\x03\x81\x15\x78\x68\x4e\xd4\x18\x8d\x28\xf6\x00\x7d\x3d\xfc\xfa\x97\xc3\x23\x54\xab\x39\x63\x40\x37\xb6\x83\xae\x89\x0b\x4c\x02\xfa\xe9\xc6\x76\x7e\xae\xd5\xce\xb8\xbf\x10\x64\x34\x56\xe8\x27\xf7\x67\xf4\xe5\xe8\xcb\x11\xb2\x31\x43\xbf\xf1\x31\x93\x9c\xd5\x6a\xb7\x20\x26\x44\x06\xad\x23\x22\xd1\x18\x04\x0c\x16\x68\x24\x30\x53\xe0\x1d\xa0\xa1\x00\x40\x7c\x88\xdc\x31\x16\x23\x38\x40\x8a\x23\xcc\x16\xc8\x07\x21\x39\x43\x7c\xa0\x30\x61\x84\x8d\x10\x46\x2e\xf7\x17\x35\x3e\x44\x6a\x4c\x24\x92\x7c\xa8\xe6\x58\x00\xc2\xcc\x43\x58\x4a\xee\x12\xdd\x6f\x8f\xbb\xd3\x09\x30\x85\x55\xd0\xde\x90\x50\x90\xe8\x27\x35\x06\x64\xf5\x96\x35\xac\x9f\x75\x23\x1e\x60\x5a\x23\x0c\x05\xbf\xad\x7e\xd2\xa3\xe6\x53\x85\x04\x48\x25\x88\x1b\x60\x1c\x20\xc2\x5c\x3a\x0d\xa8\xf5\xf4\x33\x25\x13\xb2\x6c\x21\xa8\xae\x07\x2f\x6b\x8a\xa3\xa9\x84\x03\xdd\xcf\x03\x34\xe1\x1e\x19\x06\xff\x07\x3d\x2c\x7f\x3a\xa0\x44\x8e\x0f\x90\x47\x02\xe8\xc1\x54\xc1\x01\x92\xc1\x47\x4d\xcb\x83\x60\x1c\x9f\xb8\x40\x12\x28\xad\xb9\xdc\x27\x20\x91\x1e\xeb\x73\xef\x74\x99\xa0\xeb\x7e\x40\x50\xb5\x24\x91\x0c\xbe\xcc\xc7\x7c\x12\x1d\x09\x91\xb5\xe1\x54\x30\x22\xc7\xa0\xeb\x78\x1c\x49\xae\x5b\xfc\x03\x5c\x15\x7c\x09\x8a\x0f\x39\xa5\x7c\x1e\x0c\xcd\xe5\xcc\x23\xc1\x88\xe4\xdf\xc2\x89\xc6\x03\x3e\x03\x3d\x96\x70\x6e\x19\x57\xc4\x0d\xc9\xad\x27\xc0\x7f\x9e\xd5\xe5\x4f\x72\x8c\x29\x45\x03\x58\x12\x0c\x3c\x44\x58\x2d\xf8\xb4\x1a\x8e\x08\x9a\x97\x0a\x33\x45\x30\x45\x3e\x17\xba\xbd\xcd\x61\x1e\xd6\x6a\xce\x55\x0b\xf5\x3a\x17\xce\x7d\xb3\xdb\x42\x76\x0f\xdd\x76\x3b\xbf\xdb\xe7\xad\x73\x64\x35\x7b\xc8\xee\x59\x07\xe8\xde\x76\xae\x3a\x77\x0e\xba\x6f\x76\xbb\xcd\xb6\xf3\x1d\x75\x2e\x50\xb3\xfd\x1d\x7d\xb3\xdb\xe7\x07\xa8\xf5\xdf\xb7\xdd\x56\xaf\x87\x3a\xdd\x9a\x7d\x73\x7b\x6d\xb7\xce\x0f\x90\xdd\x3e\xbb\xbe\x3b\xb7\xdb\x97\xe8\xf4\xce\x41\xed\x8e\x83\xae\xed\x1b\xdb\x69\x9d\x23\xa7\x83\x82\x06\x97\x50\x76\xab\x17\x80\xdd\xb4\xba\x67\x57\xcd\xb6\xd3\x3c\xb5\xaf\x6d\xe7\xfb\x41\xed\xc2\x76\xda\x01\xe6\x45\xa7\x8b\x9a\xe8\xb6\xd9\x75\xec\xb3\xbb\xeb\x66\x17\xdd\xde\x75\x6f\x3b\xbd\x16\x6a\xb6\xcf\x51\xbb\xd3\xb6\xdb\x17\x5d\xbb\x7d\xd9\xba\x69\xb5\x9d\x43\x64\xb7\x51\xbb\x83\x5a\xbf\xb7\xda\x0e\xea\x5d\x35\xaf\xaf\x83\xa6\x6a\xcd\x3b\xe7\xaa\xd3\x0d\xfa\x87\xce\x3a\xb7\xdf\xbb\xf6\xe5\x95\x83\xae\x3a\xd7\xe7\xad\x6e\x0f\x9d\xb6\xd0\xb5\xdd\x3c\xbd\x6e\x85\x4d\xb5\xbf\xa3\xb3\xeb\xa6\x7d\x73\x80\xce\x9b\x37\xcd\xcb\x96\xae\xd5\x71\xae\x5a\xdd\x5a\x50\x2c\xec\x1d\xba\xbf\x6a\x05\x9f\x82\xf6\x9a\x6d\xd4\x3c\x73\xec\x4e\x3b\x18\xc6\x59\xa7\xed\x74\x9b\x67\xce\x01\x72\x3a\x5d\xe7\xa9\xea\xbd\xdd\x6b\x1d\xa0\x66\xd7\xee\x05\x04\xb9\xe8\x76\x6e\x0e\x6a\x01\x39\x3b\x17\x41\x11\xbb\x1d\xd4\x6b\xb7\x42\x94\x80\xd4\x28\x32\x23\x9d\xae\xfe\xfb\xae\xd7\x7a\x02\x44\xe7\xad\xe6\xb5\xdd\xbe\xec\x21\xbb\x1d\x99\xbe\xc3\x5a\xad\x39\x55\x63\x2e\xfe\xb6\x2e\x14\xd0\x31\xc1\xcc\x17\x64\x02\x47\x7f\x3e\xfa\xeb\x7f\x8e\x26\x98\xd0\x43\x97\x4f\x1a\xb5\x5a\xbd\xde\xa8\x1d\x13\xa6\x40\x0c\xb1\x0b\x8d\x1a\x42\xc7\x02\xfe\x67\x4a\x04\x48\x44\xc9\xe0\xc4\x1a\xa9\x87\x7f\xb7\x9e\xe5\xd9\xd7\xc3\x2f\x5f\xac\x4f\xba\x5c\x20\xc1\x9e\x6a\xd6\x97\x9c\x55\x57\x0b\x1f\x50\xc0\x2f\x01\xf2\x56\x29\x86\x27\x80\x2e\x7f\x23\x72\xcc\xe3\x0b\x78\x20\x5d\x41\x7c\xcd\xec\x4d\xf4\x1b\xf6\x31\x03\x09\xc8\x0b\xa5\x03\x16\x0b\x34\xe4\x02\x5d\xb6\x3b\x37\xad\xc3\x78\x84\x67\x1e\xda\x94\x8d\xf1\xe5\xb1\xa6\x97\x34\xa2\xd7\x0a\x81\x87\x6c\xed\x52\x2c\xe5\x89\x75\xa9\x1e\x6e\xb9\xcf\x67\x20\x6e\x80\x4d\x2d\x44\xbc\x13\x6b\x82\x09\xd3\x7f\x05\xe5\x11\x3a\xf6\x05\xf7\x41\xa8\x05\x0a\x28\x70\x62\xb9\x98\xf5\x87\xdc\x9d\x4a\xab\x71\x81\xa9\x84\xe3\x4f\xab\x02\xcb\xf2\xee\x98\x50\x2f\xfc\x77\x5c\x7b\xa7\xfc\xd1\x5a\xfd\xba\x8d\x3e\x23\x92\x0c\x28\x58\x0d\x47\x4c\xb7\xa0\x8b\x74\x27\xae\x0e\x17\x64\x25\xf8\xad\xc6\x0c\x84\x22\x2e\xa6\xb1\x15\x23\x63\x89\x1f\xcf\x0d\xf7\x80\x9e\x4e\x95\x0a\xc0\xd6\x4a\x16\x18\x5b\xc6\xf8\xf2\x54\x13\xe0\x02\x99\x81\xec\x7b\x30\xc4\x53\xaa\xf2\xd5\xc6\x7a\xc9\xf6\x83\x3f\xac\x06\xf6\xfd\x43\x3c\xe0\x53\x65\x5a\x5b\xc1\xa3\xb2\x90\x12\x98\x49\x8a\x15\x1e\x50\x38\xb1\x16\x20\xad\x46\x33\x40\x59\xf2\x50\x3c\xd8\xf1\xa7\x90\xbe\x91\x6f\x3e\x76\x1f\x08\x1b\xa5\x37\x0a\x8f\x3e\x66\x5e\xca\x22\x88\xab\x34\x24\x94\xe6\xa3\x8c\xcf\x25\x09\xd7\xcd\x97\xa4\x11\x6c\x75\xf7\xf8\x53\x94\x25\x36\xc6\xb8\x3d\xbe\xcd\x46\xe5\x74\x30\xd1\x0c\x19\xb0\xa6\xc9\x02\x7f\xee\xe5\xe7\xed\xe2\x1b\x3d\x5c\xeb\xdd\x7a\xcf\xb6\x17\x7a\xd3\xf7\x29\x71\x35\xd7\xdc\x13\xe6\xf1\x79\x28\x2e\xb0\xef\x2f\xff\x2c\x28\x2f\x36\x27\x72\x06\x4c\x49\xab\x71\x79\xfe\xad\x7f\x7a\xe7\x38\x9d\x76\x5f\xeb\xe8\xfe\x4d\xb3\xf7\x0d\xfd\x2f\x0a\xbe\x7f\x6b\x7d\xdf\xfe\xd8\x73\xba\x77\x67\xce\x5d\xb7\xa5\x3f\x66\x35\xb3\xe4\x8b\xfe\x9c\x78\x6a\x6c\x35\x7e\x3d\x3a\x32\xad\x31\x86\x40\x44\x5b\x8d\xbf\xc4\x54\x91\x64\xc4\x30\x5d\x56\x18\x68\xa1\x50\xf7\x05\x48\x59\xd7\xc3\xb2\xd0\x18\x33\x8f\x82\x38\xb1\xe6\x9a\x66\xa1\xdc\xb8\x0d\x4a\x58\x48\xce\xb1\xef\x83\x77\x62\x31\x1e\xea\xa9\x4d\xc0\x07\x58\xa4\xa2\x7d\x83\x45\x0a\xd4\x1e\xca\x65\x03\xf1\xda\x85\x19\x60\x0a\x22\x5c\x6c\x12\xb0\x70\xc7\x4f\xdf\x5e\x56\xde\xe6\x12\x25\x5a\xdc\x69\xa6\xeb\x07\x76\x84\xd5\x90\x94\x78\x50\xd7\xea\x3c\x11\x63\x6b\xfc\x26\x53\x93\xd4\x03\xbd\x92\xfb\x81\x09\x04\x52\x59\x8d\xaf\xdb\xcb\xb3\x34\xb1\xca\x10\x2c\xae\xae\xb1\x22\x4e\xa7\x58\x1e\xaa\x95\x1a\x7b\xd9\xf1\xef\x84\x06\xe9\x74\x88\xa7\x45\x4f\xf3\x4d\x8b\x29\xb1\x58\x67\xa4\xf0\x43\x12\x4c\x49\x42\x65\x10\xab\x28\xc4\x04\x8b\x11\x61\x7d\xa9\xb0\x50\x56\xe3\xcf\x25\x20\x20\xb0\x17\xca\x00\x28\xee\x97\x03\x18\x70\xa5\xf8\xa4\x20\x46\x60\xe5\x63\xb1\xe8\x13\xf7\xc9\x54\x03\x8f\xa8\xfa\x90\x30\xaf\x2e\x17\x93\x01\xa7\xc4\x2d\x0d\x1c\x98\x82\xb3\xd0\x8a\x33\x5c\xe0\x99\x90\x12\xb4\xa4\x9c\xe5\x02\x34\x54\x84\x6b\xeb\x3a\x55\x1b\x66\xb7\x11\x22\xd5\xdd\x31\x66\x23\xf0\xb6\x9a\x38\x5b\x7d\x37\x02\x8f\xb3\x6b\xa3\xf4\x8a\xb3\x71\xd3\x28\x6a\x64\xef\xa6\x01\x64\xdb\xbe\x69\xb5\x9f\x2d\xcc\x54\x2d\xb3\x1a\x7d\xea\xf0\x36\xec\xe3\xe8\x4f\xc9\x74\x4b\xa7\x59\x29\x7a\x15\xa7\x55\x61\x3a\xa5\xd0\x28\x91\x3e\x79\xb4\x61\xcf\x15\x9c\x52\xf0\xd6\x4d\xf7\x95\x35\x25\xa7\x54\xc9\x8d\x02\xaf\xab\x39\x8b\x54\x1f\x4b\xdd\xe3\x01\x16\x7d\x3f\x10\x75\x0b\xab\xc1\x60\x06\x22\x13\x27\xc2\xe6\xe0\x8d\xa0\x2e\x00\xbb\xe3\x18\x26\x5f\x92\xa6\xe5\x8d\xa0\xbb\x2a\x62\xc0\xef\x79\xb5\xf3\xef\x04\xe6\x3e\x0f\xd4\xd9\x9b\x68\xe2\xc2\x22\x44\x8e\xb1\xc7\xe7\x4b\x7b\x97\x71\x66\x06\x92\x4a\x9c\x78\x02\x5d\x13\xa9\x02\x73\x6e\x7b\xd5\xa6\x90\x6c\x27\x64\xdb\x15\xe9\x62\xc9\x07\x14\x42\x47\xcb\x84\x7b\x60\x35\x06\x82\xcf\x73\xa0\x45\x96\xb1\xe0\xf3\x7a\x88\x97\xbc\x8c\xbb\x7c\xde\x7b\x2a\x62\xa8\x13\xb3\x55\x57\xaa\xfc\xce\x06\x78\x55\xe1\x5f\x44\xcc\xec\x42\xf6\xc7\x78\x61\xa2\x03\xcd\x2b\xfb\xe3\x49\x13\x53\xf8\x1d\x39\xd4\x12\x14\x64\xb6\x43\xcd\xcc\x91\xd0\x03\x1f\x0b\xac\xf8\x1b\x7a\x0d\xde\xd1\x64\x24\xac\xd8\x5d\x4d\xc6\xf6\xde\xfc\x4d\x9d\x37\xb9\xf6\xe0\xa6\x5e\x9b\x38\x8b\x0b\x82\x8d\x49\xa6\xa5\xf5\x12\xbe\x99\xbc\x55\x8b\x58\x57\x79\xec\xd1\x0c\x9b\xe7\x6d\x5d\x34\x39\xed\xb7\x64\x4f\x53\xe9\xa1\xec\x62\x38\x71\x18\x85\xbc\x4e\xd9\xb4\x89\xa7\xcf\x35\x1e\x00\x0d\x19\x60\xe9\x08\xf8\x86\x19\x0e\xbf\xbe\x27\xfb\x0d\xab\x65\x40\x86\x4c\x2f\xb8\x5e\x74\x65\xeb\xb9\x98\x82\x85\x66\x98\x4e\xe1\xc4\xfa\x7c\xf8\x25\xdd\xe8\x0a\xc4\xaa\x69\x6b\xc7\x52\x2d\x28\x64\xf6\x48\x4f\x47\xd4\x1d\x53\x7f\xc0\x0c\x67\x77\x24\x13\x3f\xdb\x44\x34\xf1\x70\xa0\x5d\x78\x39\xe2\x40\xf2\x79\x3a\xe2\x10\x72\x79\x3b\x50\xb6\xc7\x03\x65\x5b\xcd\x3b\xe4\xb4\x3f\xc8\x0f\xcd\x6a\xff\xf1\xe5\xd7\x7d\x61\xb6\x3f\x48\xc5\x6d\xd9\x08\xc6\xfb\xa6\x67\x8a\xbc\x39\xb7\x69\xc3\xee\x1c\x14\x26\x54\xbe\x3f\x6e\x2b\x7f\xc4\x92\x02\x63\x7e\xcc\x92\x02\xa2\x8f\x5a\x3e\x1b\x4a\xdf\xdd\x9c\xb7\xc4\xe1\xcc\x05\xf6\xcb\xcd\xd1\x23\xa6\x64\x64\xae\x48\x36\xfd\x3c\xcb\xe3\x18\xa8\x53\xc2\x1e\xd6\x1c\x3d\xab\xef\xd7\xfa\xb3\xb1\x73\xa7\x90\x40\xd3\x6b\xbd\xee\x85\x8b\xbd\x12\x68\xd9\x08\x99\x41\x43\xdb\x14\x79\x15\x81\xe6\x53\xec\xc2\x98\x53\x0f\x44\xda\xb1\xd8\xab\xbb\xf7\x72\x39\xbd\xd2\xd6\x46\x51\x3f\x60\xb1\x25\x50\xc8\x6a\x4c\x98\xea\x58\x12\x98\x7a\x1e\xa2\x31\x33\x13\x2e\xc0\x66\x43\x9e\x10\x35\x13\xd7\xf3\x37\x09\x06\x49\x88\xa0\x99\xfa\xaf\x1f\x10\x12\x86\x78\x19\xc7\xd2\x94\x22\x61\x59\x32\xc6\xd5\x7f\xa5\x98\x92\x78\x87\xea\xce\xa8\xb2\x0b\xca\x54\x47\xef\x45\x8f\xde\x0b\x2c\x08\x85\xdd\x87\xde\x9c\x28\x77\x1c\x2b\x65\x92\x06\xb4\x17\x0e\xb1\xf1\xd2\x2e\x73\x81\xa9\xec\x33\xe4\x38\x84\x2a\x30\x69\xb5\x01\x0f\xd6\x81\xd5\x58\xe9\x1d\xbd\x2c\x7e\x68\x3e\x35\xd8\xc6\xbe\x3a\x9f\x46\x6d\x83\xf0\xd3\xbe\xb3\x6c\x81\x2d\x7a\xdc\x21\xcc\x5c\x10\x45\xd8\xc8\x2c\xe2\x65\x67\x14\xc8\xa0\x42\x19\x98\xa2\x91\x30\xe6\x84\x8d\x27\xae\x41\xdc\x4a\x52\x97\x0b\x91\x2f\x0e\xa8\xa8\xcf\x23\x0e\xab\x50\x3c\xcb\x13\x98\x11\x11\x51\x81\x03\xa4\xb4\x2e\x17\xa6\x63\x1c\x58\x19\x5a\xc6\xe1\x15\x3e\x64\x8a\x80\x1a\xd3\x15\xa5\x38\xe9\x4c\xeb\xef\x98\xc2\x71\x80\x65\xa9\x1c\x87\x59\xd0\x63\x97\x06\x49\x43\xe7\x66\xcc\x35\x2e\x7d\xa4\x80\x56\x52\x74\x17\x6d\xe5\x76\x8a\x45\xc0\xcc\xcf\x0a\xe2\xab\xad\x7c\x7b\xe1\xbd\x9e\xd5\xc1\xc1\x80\x53\x2f\xcb\xb9\x95\x81\xb8\x79\x12\xf1\xcb\xd7\xbf\x46\xfe\xcb\x03\x6f\x7e\x44\xb1\x5e\x27\xdb\xb1\x16\x29\x6f\xe4\x64\x8b\xd6\xd8\x81\xc3\x2d\x0d\x30\xbf\xf3\x2d\x0d\x2d\xf7\x39\x5e\x04\x2c\xdb\x29\x17\x2d\x9e\x43\x70\xed\x46\xc8\x69\xeb\x46\x1f\x33\xdd\x2f\x99\xb3\x12\x7e\xc5\x20\xf3\xfb\xf9\xd3\xd0\xf6\x42\xbc\xe5\x8e\x40\x88\xa0\x55\xd2\x67\x97\xd2\xc7\xf0\x5c\x33\x02\xb6\xf7\xd2\xa7\x92\x32\x05\x21\xcd\xbd\x35\x59\x80\xa9\x36\x1b\xae\x4c\xb6\x6c\xc4\xca\x64\xdb\x5b\xa1\x69\x78\x76\x1a\x01\xdb\x7b\xa1\xb9\x32\xd9\x70\x65\xb1\x55\x16\x5b\x65\xb1\xed\xad\xf0\xf9\xba\x4f\xc2\xc7\x7c\x9e\x0c\x41\xcd\x00\x0d\xc0\x5e\x2e\x94\x87\xe9\x0b\xee\x79\x2d\x98\xad\x18\x03\xa2\x02\x96\x8a\x31\x90\xee\x73\x21\xbf\x55\xc4\x61\xdc\x71\x86\xde\xf0\x57\x67\x19\xc6\x54\x8d\xa7\x6c\x75\x96\xb1\x0e\x56\xe2\x2c\x23\x72\x57\x57\xaf\xcd\xe0\xcb\x47\x3c\xde\xd8\xbc\xbf\x9b\x97\xca\x1a\x73\xeb\x16\xef\x2a\x92\x73\xfd\x1a\xef\x13\x19\xbb\x7c\xde\x7c\xfe\x3d\x47\x98\xe7\x53\x7b\x7a\x66\x51\xb0\x2c\x4e\xac\xb5\xf8\x3f\x63\x8b\xf3\x07\xdd\xfd\x27\xef\xac\xdb\x1c\xe9\xe9\xa9\x2c\xc5\x94\xd2\x95\x69\x13\x29\x15\x67\xda\xe4\x5a\x44\xe6\x76\xcd\xb7\x32\xb0\xef\xe6\x26\x46\xec\x5d\xdb\x47\x3c\xf1\x29\x54\x61\x1e\x4f\x78\x26\x0f\x9f\xac\xa8\x96\xf7\xcd\x93\xa7\x46\x2a\xfb\x6b\x8f\xec\xaf\xd5\x6c\x56\x26\x58\x0a\xa6\x91\x09\xb6\xa4\x64\x65\x84\x19\x02\xbe\xba\x11\xb6\x5a\xea\x95\x1d\x96\x52\xba\xb2\xc3\x22\xa5\xe2\xec\xb0\xbc\xeb\xc8\xdc\x14\x6b\x95\x44\x7e\x83\x6b\x64\x2f\x17\x94\x5d\x34\x70\x78\x57\x31\xd9\x06\x24\x7c\x89\x67\x0b\x5f\xfc\x6a\x5b\xee\x6b\x57\x65\xef\xb6\xa5\xec\x0c\x5e\xe2\x6e\x5b\x53\xab\xfb\x53\xbc\x3f\xd7\xd8\xf2\xdc\x40\x0b\xd3\x04\x68\xd3\x6c\x80\xdd\x87\xd8\xb4\x01\xa5\x47\x13\x57\x39\xef\x9b\xab\x25\xb7\x30\x9b\xd5\xf3\xa5\x23\x78\x42\x89\x58\x66\x2e\x25\xee\x43\xc4\x26\x63\x78\x46\x46\x58\xc1\xa9\xbe\xcf\xf0\x02\x0f\x33\xda\x13\x3c\x82\xbd\xbf\x16\xb1\x81\xb1\xf6\x1e\xf0\x88\xd7\x7d\x01\x33\xc2\xa7\x32\xc7\x8b\xc0\x7b\xf0\x60\xdf\xde\x3c\x9b\xba\xce\xb1\x43\x2e\xe6\x58\x78\x15\xd3\xee\x84\x69\x2f\x42\x6a\x56\x7c\x1b\xcf\xb7\x0c\x1e\xd5\x7b\xe5\xd9\x9d\x3f\x77\x99\x8f\x67\x1d\x3e\x1a\x51\x58\xe7\xdc\xd5\x35\xb7\xc8\x2f\xaf\xc0\xc0\x7b\xc0\x80\x4a\x0f\x79\x9d\x01\xa3\xc4\xa8\xf8\x2f\x86\xff\x66\x04\xe6\xf5\x80\x4e\xef\x8c\x03\xb1\xfb\xb0\xf4\x38\x02\xf3\xf2\xae\xb6\x17\xd4\xb9\xef\x78\x7b\x93\xb2\x4f\x34\xdf\xde\x94\x7f\xf8\x35\xcf\x2b\xa8\x7b\x90\xd5\x2a\xf2\x63\xc4\xdd\xa9\xdd\x23\x83\xb5\xed\xdb\xb6\xf4\xb8\x02\xec\x81\x88\x6e\xf1\x72\x4b\x8c\x22\x12\xc2\xdc\x95\x93\x9c\xc3\x6c\xfb\x1c\x80\xcf\xfb\x2e\xe5\x12\xfa\x83\xa5\xde\x49\xec\xb2\xc1\xc3\xb9\xdb\xba\x2d\x7c\xe2\x3b\x45\xb3\x15\x12\xb6\x05\x35\x59\x39\x0d\x96\xa5\xb9\xd6\x87\x9a\xaa\xb7\x4c\x9d\x09\x49\x7a\xea\x6d\x1c\x09\xc9\xfa\x28\x4f\x5e\x97\x12\x4f\x83\x17\x7a\xca\xf9\x06\xd8\x74\xef\xd6\x9d\xae\xd2\xe7\xac\xaf\xf7\x1f\x39\x5f\x83\x2e\x97\x3b\xd1\x0f\xf3\x69\x86\xc9\xfa\x02\xe2\x24\x56\xfc\x60\x8b\x94\xfb\xc0\xea\x13\x60\xd3\x97\x5d\xa4\xa6\x9a\xd3\xcc\x18\xca\xbd\x89\x29\xa1\x09\x33\xd2\x2b\x0e\xf8\x54\x9d\x13\x4c\xf9\x68\x99\x58\x71\xed\xc3\x12\x2b\xe7\xc4\x6d\x2f\x6c\x49\xfe\x99\x92\xc9\x69\x2b\x4c\x9f\x7b\x38\xc1\x92\xd8\x52\x95\x0b\x1f\xfa\x63\xc2\x94\xd5\xf0\x74\x97\x33\x2b\xe8\xd7\xbe\x80\xa9\xfe\x90\x0b\x9d\x64\x34\x8c\xcf\xc8\xaa\xe7\x0b\x3e\x12\x78\xb2\x5c\x73\xf1\x7a\x78\x8b\x33\xc2\x14\xc0\x56\xe3\xe8\xf0\xf3\x61\x66\x9e\xc7\xa7\x2c\xbc\xb1\x9a\xff\x39\x87\xf9\xff\xff\xdf\x56\x9a\xde\x6c\xe8\xc9\x44\x67\xb7\x8c\xcd\x8e\x9a\x91\x33\x38\x0b\x7c\x99\x0d\xd8\x6a\xac\xa7\x03\xfe\x13\x55\x7f\x8f\xcf\x08\xfc\xa7\x91\xfa\x7b\x16\x24\xe5\x23\xbe\x9e\x5f\x8c\x04\xa2\xa8\xae\xb3\x79\xb3\xcc\x19\x5e\xa6\x55\x5e\xf2\xe0\x84\xa8\xfa\xe3\xe7\x2d\xa6\x8a\xaa\x7c\x0f\x28\x28\xd8\x4a\xea\x35\x26\x1e\xdc\x13\x6f\x04\xca\x20\x49\x66\x02\x06\x61\x63\x32\x20\xaa\xad\x73\xd3\x66\x82\x08\x90\x3e\x67\x12\x72\x74\x22\x34\x72\x75\x72\x66\x86\x69\x5d\xff\x79\x62\xcd\x06\x6b\x4f\x7b\xe4\x4d\xba\xf9\xb2\xb9\x8d\x37\x0d\x55\x1f\xbb\x84\x8d\x12\xb6\x00\x09\xc3\x5b\x26\x0a\xc6\x02\xb0\x95\x6e\x26\x84\x26\x42\x76\xde\x87\xa2\x29\x1c\x28\x5e\xf0\xa9\xea\xeb\xc7\x46\xd3\x25\x7e\xbc\xda\x4d\x7e\x0b\x33\xcf\x71\x55\x2e\x94\x37\x49\x07\x92\xab\xca\x4b\x25\x67\x89\x27\xd3\xce\x76\x94\xdb\xf0\xc6\x5a\x38\x26\x80\x70\xf9\xaa\xf3\x4e\x93\x1c\x67\x06\x09\xa0\xe5\xf3\xba\x3b\x54\xd1\x1b\x19\x8f\xe3\xd2\x17\x27\xd4\x48\xcb\x78\x5c\x54\xad\xef\x8d\xdc\xcf\x48\x8b\x9c\x18\x3d\xba\x4b\x8f\x84\x69\x95\x3c\x11\xa0\x5b\xfd\x2b\x51\x37\x12\xcc\x98\x90\x82\xdc\x60\xab\x98\x10\xe3\xb9\xeb\x8d\x62\x2e\x11\x67\x1c\xa7\xb9\xdb\x64\xcd\xef\x24\xdd\x72\x92\x8d\xf0\x39\xf5\xce\x6e\x9e\xc3\x9a\xf5\x37\xf4\x23\xf2\x76\x65\x0c\xa7\x45\x36\xbe\xd4\x61\x4d\xa1\xd3\xd6\x9c\x97\x9a\x13\xaa\x9b\xbd\xfd\xb9\x59\xd9\xfc\xf6\xf3\x66\x4d\xe3\x9b\xce\x06\x31\x92\x65\x52\x71\x64\x45\x3f\x56\x99\x60\x93\x4c\x51\xb4\x2b\x8e\x6b\xb1\x11\x25\x72\x5c\x31\x9c\x41\xe5\x77\xc2\x70\xa6\xcf\x97\xfc\x40\xdc\xf7\xc6\xc1\x09\x29\x37\x95\x96\x6c\xf8\xe3\x24\x62\xce\xb6\x50\x31\x9d\xe3\x45\x66\xc0\x74\x95\x6f\x39\x0d\xa4\x6c\xbe\xe5\x8d\x6d\x30\x17\x9e\xc9\x75\xa2\x9d\x5c\x30\xd9\xd5\xa5\x92\xed\xc0\xba\xe2\xd7\x86\x72\x5d\x17\x5a\x23\x5a\x91\x2b\x43\x55\xee\xe5\xf2\xf2\x3e\x23\xd0\xff\x55\x73\x2f\xef\x9b\x87\x4b\xdf\x39\x7e\x5d\xff\x56\xf8\x78\x70\xe5\xdd\xaa\xbc\x5b\xe5\xbc\x5b\x95\xbb\xe9\x03\xba\x9b\x8a\xed\x62\xd7\xa5\xd8\xd9\x18\x0b\xec\x2a\x10\xef\x66\x17\xfb\xc7\x54\x2a\x32\x5c\x98\x66\x9e\x29\xbf\x2b\xfc\x72\xf8\xcb\xaf\x95\x1b\xe6\xcd\xdd\x30\x89\x4f\x79\xbd\xd7\x6d\x60\x9e\x03\x06\x33\xa2\xc5\x13\xae\xda\xbd\x65\x10\x28\xfa\xfa\xd6\x6a\x39\x29\xc1\x1f\xa0\x23\xb2\x9f\x19\xd8\xeb\x9d\x5b\xfe\x34\x5d\x71\x28\xfb\x9a\xe0\xb6\x2c\x48\xe9\xfc\xb6\x4f\x07\x3c\xe6\x08\x66\xb7\xff\xcd\x52\x8d\xa2\xec\x1d\x2d\xfa\x60\xdb\xe2\x1f\xd5\x0f\x9a\x60\xbf\xf5\xa6\x03\xbd\x77\xfc\x98\xe6\xdb\x07\x5a\x3e\x3b\x77\xab\xe4\xcf\xe5\xba\xb5\x78\xba\x80\x3d\xc2\x46\x37\x80\x19\x61\x23\xf9\x1e\x96\xcf\x5b\x9e\x61\x15\xcb\x12\x5b\x58\x63\x64\xd8\x79\xd9\x1a\xe2\x43\xcb\x65\xec\x79\x86\x64\x4c\x64\xc9\x8c\x37\xaa\x5f\x9a\x25\x5b\x9a\x72\x89\xe6\xe5\x9b\x6e\x55\x72\x6e\x31\x12\x94\xd3\x39\x71\x55\x17\x86\x99\x6f\xf4\xef\xe5\xf6\x63\x1f\xd2\xd3\x02\xa5\xc4\x97\xe4\x9f\x3a\x1e\xdc\xf3\x68\xa1\x81\xe4\x78\x9b\xbf\xb0\x9d\xb7\xe1\x80\xa7\xa9\x13\x9e\xff\x35\xb6\xbd\x5c\x20\xc9\xaf\xab\x9d\x3f\x5f\x47\x10\x30\x04\x01\xcc\x35\x79\xc5\xaa\xb2\xb2\xad\xc6\x2f\x95\x4c\x7e\x59\x99\xfc\x5f\x53\x10\x8b\x33\xee\x41\x25\x95\x2b\xa9\x1c\x29\xfa\xd1\xa5\xb2\x5e\xf9\xc8\x0d\x96\x7e\x25\x8b\x93\x6b\x3e\xcb\xe2\x0c\xe6\xf8\xd0\x91\x00\xc7\x9f\xf4\xd5\xad\x21\x76\xa1\x51\xfb\x57\x00\x00\x00\xff\xff\x4f\xb9\x32\x9a\xe9\xb5\x00\x00")

func dataGjishoGladeBytes() ([]byte, error) {
	return bindataRead(
		_dataGjishoGlade,
		"data/gjisho.glade",
	)
}

func dataGjishoGlade() (*asset, error) {
	bytes, err := dataGjishoGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gjisho.glade", size: 46569, mode: os.FileMode(436), modTime: time.Unix(1593802081, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/gjisho.glade": dataGjishoGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"gjisho.glade": &bintree{dataGjishoGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

