// Code generated by go-bindata. DO NOT EDIT.
// sources:
// data/gjisho.glade
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataGjishoGlade = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5d\xdd\x56\xeb\x38\x96\xbe\xcf\x53\x68\x7c\xd1\xab\x6a\x0d\xe1\xfc\x55\xf7\x54\x77\x43\x7a\x02\x04\x70\x1d\x48\x98\xc4\x14\x73\xae\xb2\x14\x7b\x27\x51\xa1\x48\x1e\x49\x21\x27\xbd\xe6\x85\xe6\x35\xe6\xc9\x7a\x59\x76\x20\x4e\xfc\x23\xdb\x01\x02\xc7\x75\x53\x07\x47\xfa\x2c\x7d\xd6\xde\xda\xda\xda\xd2\x3e\xfa\xc7\xf7\x19\x45\x0f\x20\x24\xe1\xec\xd8\xfa\x74\xf8\xd1\x42\xc0\x5c\xee\x11\x36\x39\xb6\x6e\x9d\xf3\xe6\xaf\xd6\x3f\x5a\x8d\xa3\x7f\x6b\x36\xd1\x05\x30\x10\x58\x81\x87\x16\x44\x4d\xd1\x84\x62\x0f\xd0\x97\xc3\x2f\x7f\x39\xfc\x88\x1a\x0d\x67\x0a\xe8\xda\x76\xd0\x15\x71\x81\x49\x40\x3f\x5d\xdb\xce\xcf\x8d\xc6\x29\xf7\x97\x82\x4c\xa6\x0a\xfd\xe4\xfe\x8c\x3e\x7f\xfc\xfc\x11\xd9\x98\xa1\xdf\xf8\x94\x49\xce\x1a\x8d\x1b\x10\x33\x22\x83\xb7\x23\x22\xd1\x14\x04\x8c\x96\x68\x22\x30\x53\xe0\x1d\xa0\xb1\x00\x40\x7c\x8c\xdc\x29\x16\x13\x38\x40\x8a\x23\xcc\x96\xc8\x07\x21\x39\x43\x7c\xa4\x30\x61\x84\x4d\x10\x46\x2e\xf7\x97\x0d\x3e\x46\x6a\x4a\x24\x92\x7c\xac\x16\x58\x00\xc2\xcc\x43\x58\x4a\xee\x12\xdd\x6e\x8f\xbb\xf3\x19\x30\x85\x55\xf0\xbe\x31\xa1\x20\xd1\x4f\x6a\x0a\xc8\x1a\x44\x35\xac\x9f\xf5\x4b\x3c\xc0\xb4\x41\x18\x0a\x7e\x5b\xfd\xa4\x7b\xcd\xe7\x0a\x09\x90\x4a\x10\x37\xc0\x38\x40\x84\xb9\x74\x1e\xb0\xf5\xf8\x33\x25\x33\x12\xbd\x21\xa8\xae\x3b\x2f\x1b\x8a\xa3\xb9\x84\x03\xdd\xce\x03\x34\xe3\x1e\x19\x07\xff\x07\xdd\x2d\x7f\x3e\xa2\x44\x4e\x0f\x90\x47\x02\xe8\xd1\x5c\xc1\x01\x92\xc1\x43\xcd\xe5\x41\xd0\x8f\x0f\x5c\x20\x09\x94\x36\x5c\xee\x13\x90\x48\xf7\xf5\xa9\x75\xba\x4c\xd0\x74\x3f\x20\x54\x45\x14\xc9\xe0\xc9\x62\xca\x67\xf1\x9e\x10\xd9\x18\xcf\x05\x23\x72\x0a\xba\x8e\xc7\x91\xe4\xfa\x8d\x7f\x80\xab\x82\x27\x41\xf1\x31\xa7\x94\x2f\x82\xae\xb9\x9c\x79\x24\xe8\x91\xfc\x5b\xf8\xa1\xf1\x88\x3f\x80\xee\x4b\xf8\x6d\x19\x57\xc4\x0d\xe9\xd6\x1f\xc0\x7f\xfa\xaa\xd1\x4f\x72\x8a\x29\x45\x23\x88\x08\x03\x0f\x11\xd6\x08\x1e\xad\xba\x23\x82\xd7\x4b\x85\x99\x22\x98\x22\x9f\x0b\xfd\xbe\xcd\x6e\x1e\x36\x1a\xce\x65\x07\x0d\x7a\xe7\xce\x5d\xbb\xdf\x41\xf6\x00\xdd\xf4\x7b\xbf\xdb\x67\x9d\x33\x64\xb5\x07\xc8\x1e\x58\x07\xe8\xce\x76\x2e\x7b\xb7\x0e\xba\x6b\xf7\xfb\xed\xae\xf3\x0d\xf5\xce\x51\xbb\xfb\x0d\x7d\xb5\xbb\x67\x07\xa8\xf3\xdf\x37\xfd\xce\x60\x80\x7a\xfd\x86\x7d\x7d\x73\x65\x77\xce\x0e\x90\xdd\x3d\xbd\xba\x3d\xb3\xbb\x17\xe8\xe4\xd6\x41\xdd\x9e\x83\xae\xec\x6b\xdb\xe9\x9c\x21\xa7\x87\x82\x17\x46\x50\x76\x67\x10\x80\x5d\x77\xfa\xa7\x97\xed\xae\xd3\x3e\xb1\xaf\x6c\xe7\xdb\x41\xe3\xdc\x76\xba\x01\xe6\x79\xaf\x8f\xda\xe8\xa6\xdd\x77\xec\xd3\xdb\xab\x76\x1f\xdd\xdc\xf6\x6f\x7a\x83\x0e\x6a\x77\xcf\x50\xb7\xd7\xb5\xbb\xe7\x7d\xbb\x7b\xd1\xb9\xee\x74\x9d\x43\x64\x77\x51\xb7\x87\x3a\xbf\x77\xba\x0e\x1a\x5c\xb6\xaf\xae\x82\x57\x35\xda\xb7\xce\x65\xaf\x1f\xb4\x0f\x9d\xf6\x6e\xbe\xf5\xed\x8b\x4b\x07\x5d\xf6\xae\xce\x3a\xfd\x01\x3a\xe9\xa0\x2b\xbb\x7d\x72\xd5\x09\x5f\xd5\xfd\x86\x4e\xaf\xda\xf6\xf5\x01\x3a\x6b\x5f\xb7\x2f\x3a\xba\x56\xcf\xb9\xec\xf4\x1b\x41\xb1\xb0\x75\xe8\xee\xb2\x13\x3c\x0a\xde\xd7\xee\xa2\xf6\xa9\x63\xf7\xba\x41\x37\x4e\x7b\x5d\xa7\xdf\x3e\x75\x0e\x90\xd3\xeb\x3b\x8f\x55\xef\xec\x41\xe7\x00\xb5\xfb\xf6\x20\x20\xe4\xbc\xdf\xbb\x3e\x68\x04\x74\xf6\xce\x83\x22\x76\x37\xa8\xd7\xed\x84\x28\x01\xd5\x28\xf6\x45\x7a\x7d\xfd\xf7\xed\xa0\xf3\x08\x88\xce\x3a\xed\x2b\xbb\x7b\x31\x40\x76\x37\xf6\xf9\x0e\x1b\x8d\xf6\x5c\x4d\xb9\xf8\xdb\xba\x52\x40\x47\x04\x33\x5f\x90\x19\x7c\xfc\xf3\xc7\xbf\xfe\xe7\x64\x86\x09\x3d\x74\xf9\xac\xd5\x68\x34\x9b\xad\xc6\x11\x61\x0a\xc4\x18\xbb\xd0\x6a\x20\x74\x24\xe0\x7f\xe6\x44\x80\x44\x94\x8c\x8e\xad\x89\xba\xff\x77\xeb\x49\x9f\x7d\x39\xfc\xfc\xd9\xfa\xa0\xcb\x05\x1a\xec\xb1\x66\x33\x92\xac\xa6\x5a\xfa\x80\x02\x79\x09\x90\xb7\x4a\x31\x3c\x03\x74\xf1\x1b\x91\x53\x9e\x5c\xc0\x03\xe9\x0a\xe2\x6b\x61\x6f\xa3\xdf\xb0\x8f\x19\x48\x40\x5e\xa8\x1d\xb0\x58\xa2\x31\x17\xe8\xa2\xdb\xbb\xee\x1c\x26\x23\x3c\xc9\xd0\xa6\x6e\x4c\x2e\x8f\x35\x5f\xd2\x88\xaf\x15\x02\x0f\xc5\xda\xa5\x58\xca\x63\xeb\x42\xdd\xdf\x70\x9f\x3f\x80\xb8\x06\x36\xb7\x10\xf1\x8e\xad\x19\x26\x4c\xff\x15\x94\x47\xe8\xc8\x17\xdc\x07\xa1\x96\x28\x60\xe0\xd8\x72\x31\x1b\x8e\xb9\x3b\x97\x56\xeb\x1c\x53\x09\x47\x1f\x56\x05\xa2\xf2\xee\x94\x50\x2f\xfc\x77\xd2\xfb\x4e\xf8\x77\x6b\xf5\xeb\x36\xfa\x03\x91\x64\x44\xc1\x6a\x39\x62\xbe\x05\x5d\xa6\x39\x49\x75\xb8\x20\x2b\xc5\x6f\xb5\x1e\x40\x28\xe2\x62\x9a\x58\x31\xd6\x97\xe4\xfe\x5c\x73\x0f\xe8\xc9\x5c\xa9\x00\x6c\xad\x64\x89\xbe\xe5\xf4\xaf\x48\x35\x01\x2e\x90\x07\x90\x43\x0f\xc6\x78\x4e\x55\xb1\xda\x58\x0f\xd9\x61\xf0\x87\xd5\xc2\xbe\x7f\x88\x47\x7c\xae\x4c\x6b\x2b\xf8\xae\x2c\xa4\x04\x66\x92\x62\x85\x47\x14\x8e\xad\x25\x48\xab\xd5\x0e\x50\x22\x19\x4a\x06\x3b\xfa\x10\xf2\x1b\x7b\xe6\x63\xf7\x9e\xb0\x49\xf6\x4b\xe1\xbb\x8f\x99\x97\x31\x08\x92\x2a\x8d\x09\xa5\xc5\x98\xf1\xb9\x24\xe1\xb8\xf9\x9c\xd6\x83\xad\xe6\x1e\x7d\x88\x8b\xc4\x46\x1f\xb7\xfb\xb7\xf9\x52\x39\x1f\xcd\xb4\x40\x06\xa2\x69\x32\xc0\x9f\x5a\xf9\x69\xbb\xf8\x46\x0b\xd7\x5a\xb7\xde\xb2\xed\x81\xde\xf6\x7d\x4a\x5c\x2d\x35\x77\x84\x79\x7c\x11\xaa\x0b\xec\xfb\xd1\x9f\x25\xf5\xc5\xe6\x87\x7c\x00\xa6\xa4\xd5\xba\x38\xfb\x3a\x3c\xb9\x75\x9c\x5e\x77\xa8\xe7\xe8\xe1\x75\x7b\xf0\x15\xfd\x2f\x0a\x9e\x7f\xed\x7c\xdb\x7e\x38\x70\xfa\xb7\xa7\xce\x6d\xbf\xa3\x1f\xe6\xbd\x26\x92\x8b\xe1\x82\x78\x6a\x6a\xb5\x7e\xfd\xf8\xd1\xb4\xc6\x14\x02\x15\x6d\xb5\xfe\x92\x50\x45\x92\x09\xc3\x34\xaa\x30\xd2\x4a\xa1\xe9\x0b\x90\xb2\xa9\xbb\x65\xa1\x29\x66\x1e\x05\x71\x6c\x2d\x34\x67\xa1\xde\xb8\x09\x4a\x58\x48\x2e\xb0\xef\x83\x77\x6c\x31\x1e\xce\x53\x9b\x80\xf7\xb0\xcc\x44\xfb\x0a\xcb\x0c\xa8\x3d\xd4\xcb\x06\xea\xb5\x0f\x0f\x80\x29\x88\x70\xb0\x49\xc0\xc2\x9d\x3e\x3e\x7b\x5e\x7d\x5b\x48\x95\x68\x75\xa7\x85\x6e\x18\xd8\x11\x56\x4b\x52\xe2\x41\x53\x4f\xe7\xa9\x18\x5b\xfd\x37\xf9\x34\x69\x2d\xd0\x23\x79\x18\x98\x40\x20\x95\xd5\xfa\xb2\x3d\x3c\x2b\x93\x55\x85\xb0\xa4\xba\xc6\x13\x71\x36\x63\x45\x58\xab\xd4\xf7\xaa\xfd\xdf\x09\x07\xd9\x3c\x24\x73\x31\xd0\x72\xd3\x61\x4a\x2c\xd7\x05\x29\x7c\x90\x06\x53\x91\xa8\x1c\xb2\xca\x42\xcc\xb0\x98\x10\x36\x94\x0a\x0b\x65\xb5\xfe\x5c\x01\x02\x02\x7b\xa1\x0a\x80\xe2\x7e\x35\x80\x11\x57\x8a\xcf\x4a\x62\x04\x56\x3e\x16\xcb\x21\x71\x1f\x4d\x35\xf0\x88\x6a\x8e\x09\xf3\x9a\x72\x39\x1b\x71\x4a\xdc\xca\xc0\x81\x29\xf8\x10\x5a\x71\x86\x03\x3c\x17\x52\x82\xd6\x94\x0f\x85\x00\x0d\x27\xc2\xb5\x71\x9d\x39\x1b\xe6\xbf\x23\x44\x6a\xba\x53\xcc\x26\xe0\x6d\xbd\xe2\x74\xf5\xdc\x08\x3c\xc9\xae\x8d\xf3\x95\x64\xe3\x66\x31\x6a\x64\xef\x66\x01\xe4\xdb\xbe\x59\xb5\x9f\x2c\xcc\xcc\x59\x66\xd5\xfb\xcc\xee\x6d\xd8\xc7\xf1\x9f\xd2\x79\xcb\xe6\xac\x12\x5f\xe5\xb9\x2a\xcd\x53\x06\x47\xa9\xfc\x14\x99\x0d\x07\xae\xe0\x94\x82\xb7\x6e\xba\xaf\xac\x29\x39\xa7\x4a\x6e\x14\x78\xd9\x99\xb3\x4c\xf5\xa9\xd4\x2d\x1e\x61\x31\xf4\x03\x55\xb7\xb4\x5a\x0c\x1e\x40\xe4\xe2\xc4\xc4\x1c\xbc\x09\x34\x05\x60\x77\x9a\x20\xe4\x11\x35\x1d\x6f\x02\xfd\x55\x11\x03\x79\x2f\x3a\x3b\xff\x4e\x60\xe1\xf3\x60\x3a\x7b\x95\x99\xb8\xb4\x0a\x91\x53\xec\xf1\x45\x64\xef\x32\xce\xcc\x40\x32\xc9\x49\x26\xe8\x8a\x48\x15\x98\x73\xdb\xa3\x36\x83\xb2\x9d\xd0\xb6\x2b\xea\x12\xe9\x03\x0a\xa1\xa3\x65\xc6\x3d\xb0\x5a\x23\xc1\x17\x05\xd0\x62\xc3\x58\xf0\x45\x33\xc4\x4b\x1f\xc6\x7d\xbe\x18\x3c\x16\x31\x9c\x13\xf3\xa7\xae\x4c\xfd\x9d\x0f\xf0\xa2\xca\xbf\x8c\x9a\xd9\x85\xee\x4f\xf0\xc2\xc4\x3b\x5a\x54\xf7\x27\x53\x93\x50\xf8\x0d\x39\xd4\x52\x26\xc8\x7c\x87\x9a\x99\x23\x61\x00\x3e\x16\x58\xf1\x57\xf4\x1a\xbc\xa1\x8f\x91\x32\x62\x77\xf5\x31\xb6\xd7\xe6\xaf\xea\xbc\x29\xb4\x06\x37\xf5\xda\x24\x59\x5c\x10\x2c\x4c\x72\x2d\xad\xe7\xf0\xcd\x14\xad\x5a\xc6\xba\x2a\x62\x8f\xe6\xd8\x3c\xaf\xeb\xa2\x29\x68\xbf\xa5\x7b\x9a\x2a\x77\x65\x17\xdd\x49\xc2\x28\xe5\x75\xca\xe7\x26\x99\x9f\x2b\x3c\x02\x1a\x0a\x40\xe4\x08\xf8\x8a\x19\x0e\x9f\xbe\x25\xfb\x0d\xab\x28\x20\x43\x66\x17\x5c\x2f\xba\xb2\xf5\x5c\x4c\xc1\x42\x0f\x98\xce\xe1\xd8\xfa\x74\xf8\x39\xdb\xe8\x0a\xd4\xaa\xe9\xdb\x8e\xa4\x5a\x52\xc8\x6d\x91\xfe\x1c\x71\x77\x4c\xf3\x1e\x33\x9c\xdf\x90\x5c\xfc\x7c\x13\xd1\xc4\xc3\x81\x76\xe1\xe5\x48\x02\x29\xe6\xe9\x48\x42\x28\xe4\xed\x40\xf9\x1e\x0f\x94\x6f\x35\xef\x50\xd2\xfe\x20\x3f\xb4\xa8\xfd\xc7\xe7\x5f\xf7\x45\xd8\xfe\x20\xb5\xb4\xe5\x23\x18\xaf\x9b\x9e\x18\x79\x75\x69\xd3\x86\xdd\x19\x28\x4c\xa8\x7c\x7b\xd2\x56\x7d\x8b\x25\x03\xc6\x7c\x9b\x25\x03\x44\x6f\xb5\x7c\x32\xd4\xbe\xbb\xd9\x6f\x49\xc2\x59\x08\xec\x57\xfb\x46\xdf\x31\x25\x13\xf3\x89\x64\xd3\xcf\x13\x6d\xc7\x40\x93\x12\x76\xbf\xe6\xe8\x59\x3d\xbf\xd2\x8f\x8d\x9d\x3b\xa5\x14\x9a\x1e\xeb\x4d\x2f\x1c\xec\xb5\x42\xcb\x47\xc8\x0d\x1a\xda\x66\xe4\x45\x14\x9a\x4f\xb1\x0b\x53\x4e\x3d\x10\x59\xdb\x62\x2f\xee\xde\x2b\xe4\xf4\xca\x1a\x1b\x65\xfd\x80\xe5\x86\x40\x29\xab\x31\xe5\x53\x27\x52\x60\xea\x79\x88\xc7\xcc\xcc\xb8\x00\x9b\x8d\x79\x4a\xd4\x4c\x52\xcb\x5f\x25\x18\x24\x25\x82\x66\xee\xbf\x7c\x40\x48\x18\xe2\x65\x1c\x4b\x53\x89\xc2\xaa\x34\x26\xd5\x7f\xa1\x98\x92\x64\x87\xea\xce\x58\xd9\x05\x33\xf5\xd6\x7b\xd9\xad\xf7\x12\x03\x42\x61\xf7\x7e\xb0\x20\xca\x9d\x26\x6a\x99\xb4\x0e\xed\x85\x43\x6c\x1a\xd9\x65\x2e\x30\x95\xbf\x87\x9c\x84\x50\x07\x26\xad\x16\xe0\xc1\x38\xb0\x5a\xab\x79\x47\x0f\x8b\x1f\x5a\x4e\x0d\x96\xb1\x2f\x2e\xa7\x71\xdb\x20\x7c\xb4\xef\x22\x5b\x62\x89\x9e\xb4\x09\xb3\x10\x44\x11\x36\x31\x8b\x78\xd9\x19\x03\x39\x2c\x54\x81\x29\x1b\x09\x63\x4e\x6c\x32\xb9\x06\x71\x2b\x69\x4d\x2e\x45\x5f\x12\x50\x59\x9f\x47\x12\x56\xa9\x78\x96\x47\x30\x23\x12\x51\x89\x0d\xa4\xac\x26\x97\xe6\x31\x09\xac\x0a\x97\x49\x78\xa5\x37\x99\x62\xa0\xc6\xbc\xa2\x0c\x27\x9d\x69\xfd\x1d\x33\x9c\x04\x58\x95\xe5\x24\xcc\x92\x1e\xbb\x2c\x48\x1a\x3a\x37\x13\x8e\x71\xe9\x2d\x85\x5d\xbc\xa2\xb0\x2f\x2c\x06\x66\xbe\x45\x90\x5c\x6d\xe5\xd2\x0b\x8f\xf3\xac\xf6\x0b\x46\x9c\x7a\x79\x3e\xad\x1c\xc4\xcd\x0d\x88\x5f\xbe\xfc\x35\xf6\x5f\x11\x78\xf3\x9d\x89\xf5\x3a\xf9\xfe\xb4\x58\x79\x23\xdf\x5a\xbc\xc6\x0e\xfc\x6c\x59\x80\xc5\x7d\x6e\x59\x68\x85\xb7\xef\x62\x60\xf9\xbe\xb8\x78\xf1\x02\xfa\x6a\x37\xba\x4d\x1b\x35\x7a\x77\xe9\x2e\xb2\x6c\x6a\x9d\x57\x0e\xb2\xb8\x7b\x3f\x0b\x6d\x2f\xd4\x5b\xe1\xc0\x83\x18\x5a\xad\x7d\x76\xa9\x7d\x0c\xb7\x33\x63\x60\x7b\xaf\x7d\x6a\x2d\x53\x12\xd2\xdc\x49\x93\x07\x98\x69\xaa\xe1\x77\xa3\xca\x6a\x4b\xed\x07\xd2\x95\x86\x3b\xa5\x31\xb0\xbd\xd7\x95\x2b\x4b\x0d\xd7\x86\x5a\x6d\xa8\xd5\x86\xda\xde\x2a\x9f\x2f\xfb\xa4\x7c\xcc\xbf\x93\x21\xa8\x19\xa0\x01\xd8\xf3\x05\xee\x30\x7d\x9c\x7d\xe5\xa8\x2f\xeb\x17\x57\x44\x05\x22\x95\x60\x17\xdd\x15\x42\x7e\xad\xf8\xc2\xa4\xcd\x0b\xbd\xce\xaf\x77\x2e\x8c\x59\x4d\x66\xb6\xde\xb9\x58\x07\xab\xb0\x73\x11\x3b\x99\xab\xc7\x66\xf0\xe4\x3d\x6e\x66\x6c\x9e\xd6\x2d\xca\xb2\xc6\xdc\x3a\xb3\xbb\x8a\xdb\x5c\x3f\xb4\xfb\x48\x63\x9f\x2f\xda\x4f\xbf\x17\x08\xea\x7c\x7c\x9f\xfe\xb2\x28\x18\x16\xc7\xd6\x5a\xb4\x9f\xb1\xc5\xf9\x83\x2e\xfa\xd3\x17\xd4\x5d\x8e\xee\x4b\x6f\x7f\xfc\x18\x96\x62\x6d\xda\x6c\x94\x4a\x32\x6d\x0a\x0d\x22\x73\xbb\xa6\xd0\xd6\xdc\x9b\x3d\x77\x91\x78\xb2\xf6\x3b\x9e\xf9\x14\xea\xa0\x8e\x47\x3c\x93\x6b\x4e\x56\xac\x15\xbd\xe1\xe4\xf1\x25\xb5\xfd\xb5\x47\xf6\xd7\xea\x6b\xd6\x26\x58\x06\xa6\x91\x09\x16\x31\x59\x1b\x61\x86\x80\x2f\x6e\x84\xad\x86\x7a\x6d\x87\x65\x94\xae\xed\xb0\x58\xa9\x24\x3b\xac\xe8\x38\x32\x37\xc5\x3a\x15\x91\x5f\xe1\xd0\xd8\xf3\x85\x60\x97\x0d\x13\xde\x55\x04\xb6\x01\x85\xcf\x71\x49\xe1\xb3\x1f\x64\x2b\x7c\xc8\xaa\xea\x49\xb6\x8c\x95\xc1\x73\x9c\x64\x6b\xeb\xe9\xfe\x04\xef\xcf\xa1\xb5\x22\xe7\xcd\xc2\xa4\x00\xda\x34\x1b\x61\xf7\x3e\x31\x49\x40\xe5\xde\x24\x55\x2e\x7a\xc3\x6a\xc5\x25\xcc\x66\xf5\x62\xc9\x07\xd2\x50\x14\xe7\x54\x11\x7f\x98\x9a\x4e\xe0\xc4\xe0\x5c\x49\xdc\xdc\x73\x29\x71\xef\x63\x86\x1e\xc3\x0f\x64\x82\x15\x9c\xe8\x23\x11\xcf\x70\xb7\xa3\x3d\xc3\x13\xd8\xfb\x93\x15\x1b\x18\x6b\x57\x0a\x4f\x78\xd3\x17\xf0\x40\xf8\x5c\x16\xb8\x54\x78\x0f\xee\xfc\xdb\x9b\x9b\x57\xd7\xd5\xc0\x98\x8b\x05\x16\x5e\xad\x09\x76\xab\x09\xce\x43\x5a\x77\xa5\x0c\x22\xb8\x5a\x1f\x24\xeb\x03\x06\xdf\xd5\x5b\xd5\x05\x3b\xbf\x89\xb3\x98\x2e\x70\xf8\x64\x42\x61\x5d\x23\xac\x4e\xe0\xc5\x7e\x79\x01\xc5\xf0\x36\x04\xfb\x9a\x0b\x40\xd1\x4d\x23\xc5\xa4\x5b\x69\x3e\xd7\xa5\x3b\xce\x74\x2d\xdc\x09\xc2\xfd\x40\x60\xd1\x0c\x78\x7a\x63\xe2\x8d\xdd\xfb\xc8\xf7\x0a\x2c\x7f\x16\x78\x39\x43\xe1\x0d\x2f\xf4\x32\x56\xcc\xe6\x0b\xbd\xea\x17\xde\x16\xb9\xfd\x75\x0f\xb2\x79\xc5\x7e\x8c\x39\x7e\xb5\xa3\x68\xb4\xb6\x90\xdd\xd6\x1e\x97\x80\x3d\x10\xf1\xc5\x6e\x61\x8d\x51\x46\x43\x98\x3b\xb5\xd2\x73\xb7\x6d\xef\x88\xf0\xc5\xd0\xa5\x5c\xc2\x70\x14\x4d\x6a\xa9\x4d\x36\xb8\x30\x78\x7b\xe2\x0c\xaf\x36\xcf\x98\x36\x4b\x29\xdb\x92\xd3\x64\xb5\xe9\xb1\xf0\xb4\x18\xa6\xf3\x49\x85\xcb\x99\x08\xd7\x99\xcb\x9c\x06\x4d\xbd\x34\x69\xd3\xde\xeb\x78\x68\xd2\xa7\xb7\x22\xe9\x71\x2a\xdc\xb0\x5e\xea\x46\xec\x6b\x60\xf3\xbd\x1b\xc6\xba\xca\x90\xb3\xa1\x5e\x2b\x15\xbc\x54\xfb\xd9\x65\x40\x65\x86\x70\x6e\xeb\x7a\x9d\xe7\x34\x4c\xa2\x18\xb0\x9d\x5a\xf1\x9d\x8d\x7a\xee\x03\x6b\xce\x80\xcd\x9f\x77\xd4\x9b\xce\xec\x66\xc6\x5a\xe1\x15\x5c\x85\x99\x3a\x27\xed\xe5\x88\xcf\xd5\x19\xc1\x94\x4f\xa2\x84\x97\x6b\x0f\x22\xac\x82\x1f\x6e\x5b\x52\x24\xf9\x67\x46\x86\xad\xad\x03\x15\xdc\xc3\x29\x96\xce\x96\x18\x2d\x7d\x18\x4e\x09\x53\x56\xcb\xd3\x4d\xce\xad\xa0\x6f\x61\x03\xa6\x86\x63\x2e\x74\xf2\xd7\x30\x92\x26\xaf\x9e\x2f\xf8\x44\xe0\x59\x34\xe6\x92\xed\x84\x2d\xc9\x08\x53\x33\x5b\xad\x8f\x87\x9f\x0e\x73\xf3\x6f\x3e\x66\x47\x4e\x54\x07\x4f\xb9\xe5\xff\xff\xff\xb6\xd2\x27\xe7\x43\xcf\x66\x3a\xeb\x68\x62\xd6\xda\x9c\x5c\xce\x79\xe0\x51\x96\x66\xab\xb5\x9e\xa6\xf9\x4f\x54\xfd\x3d\x39\x53\xf3\x9f\x26\xea\xef\x79\x90\x94\x4f\xf8\x7a\xde\x37\x12\xa8\xa2\xa6\xce\xb2\xce\x72\xbf\x70\x94\xee\x3a\x92\xc1\x19\x51\xcd\xef\x9f\xb6\x84\x2a\x6e\x43\x78\x40\x41\xc1\x56\xb2\xb5\x29\xf1\xe0\x8e\x78\x13\x50\x06\xc9\x4b\x53\x30\x08\x9b\x92\x11\x51\x5d\xad\xe6\x73\x41\x04\x48\x9f\x33\x09\x05\x1a\x11\x1a\xe1\x3a\x69\x36\xc3\xb4\xa9\xff\x3c\xb6\x1e\x46\x6b\x57\xae\x14\x4d\x86\xfa\xbc\x39\xa7\x37\x0d\x69\x1f\xbb\x84\x4d\x52\x96\x28\x29\xdd\x8b\x12\x38\x63\x01\xd8\xca\xb6\x3b\x42\x9b\x23\x3f\x1f\x47\xd9\xd4\x1a\x14\x2f\xf9\x5c\x0d\xf5\x25\xb0\xd9\x1a\x3f\x79\xda\x4d\xbf\xa3\xb4\xc8\xc6\x62\x21\x94\x57\x49\xd3\x52\xa8\xca\x73\x25\xcd\x49\xa6\x69\x67\x2b\xde\x6d\x78\xe3\x59\x38\x21\xd4\x33\xba\x6d\x7b\xa7\xc9\xa7\x73\xc3\x39\xd2\x9c\x91\x15\xa6\xe8\x8d\x4c\xd4\x49\x69\xa5\x53\x6a\x64\x65\xa2\x2e\x3b\xad\xef\x8d\xde\xcf\x49\x57\x9d\x1a\xe7\xbb\x4b\x8f\x89\x69\x95\x22\xb1\xba\x5b\xed\xab\x50\x37\x16\x76\x9a\x92\x1a\xde\x60\xed\x99\x12\x8d\xbb\xeb\x95\x67\x21\x15\x67\x1c\x51\xbb\xdb\x24\xda\x6f\x24\x0d\x76\x9a\x8d\xf0\x29\xf3\x74\x75\x91\x9d\xaa\xf5\xdc\x06\x31\x7d\xbb\x32\x86\xb3\x62\x50\x9f\x6b\xa7\xaa\xd4\x16\x76\xc1\xe3\xe7\x29\xd5\xcd\xee\x64\xdd\xac\x6c\x7e\x4e\x7d\xb3\xa6\xf1\x99\x74\x83\x68\xd6\x2a\x29\x52\xf2\xe2\x54\xeb\x0c\xbd\x69\xa6\x28\xda\x95\xc4\x75\xd8\x84\x12\x39\xad\x05\xce\xa0\xf2\x1b\x11\x38\xd3\x8b\x66\x7e\x20\xe9\x7b\xe5\xc8\x8c\x8c\x33\x65\x91\x18\xfe\x38\x09\xb2\xf3\x2d\x54\x4c\x17\x78\x99\x1f\x91\x51\xe7\xc1\xce\x00\xa9\x9a\x07\x7b\x63\x19\xcc\x85\x67\x72\xf0\xab\x32\x81\xbb\x22\x31\x91\xc8\x0a\x07\xbc\x0a\x1d\xec\x5a\x23\xad\xcc\xe1\xae\x3a\x27\x76\x75\x7d\x9f\x73\x24\xe3\x45\x73\x62\xef\x9b\x87\x4b\x9f\x0e\x7f\x59\xff\x96\x3e\x39\x5e\x7b\xb7\x6a\xef\x56\x45\xef\x56\xed\x6e\x7a\x87\xee\xa6\x72\xab\xd8\x75\x2d\x76\x3a\xc5\x02\xbb\x0a\xc4\x9b\x59\xc5\xfe\x31\x97\x8a\x8c\x97\xa6\x19\x81\xaa\xaf\x0a\x3f\x1f\xfe\xf2\x6b\xed\x86\x79\x75\x37\x4c\xea\xa5\x6b\x6f\x75\x19\x58\x64\x83\xc1\x8c\xb4\x64\xe2\xea\xd5\x5b\x0e\x41\xf1\x7b\xd2\x56\xc3\x49\x09\x7e\x0f\x3d\x91\x7f\x21\xc4\x5e\xaf\xdc\x8a\xa7\x4f\x4b\x42\xd9\xd7\xc4\xc3\x55\x41\x2a\xe7\x1d\x7e\xdc\xe0\x31\x47\x30\xbb\xa7\xc1\x2c\x05\x2c\xca\x5f\xd1\xa2\x77\xb6\x2c\xfe\x51\xfd\xa0\x29\xf6\xdb\x60\x3e\xd2\x6b\xc7\xf7\x69\xbe\xbd\xa3\xe1\xb3\x73\xb7\x4a\xf1\x1c\xbb\x5b\x83\xa7\x0f\xd8\x23\x6c\x72\x0d\x98\x11\x36\x91\x6f\x61\xf8\xbc\xe6\x1e\x56\xb9\xec\xbd\xa5\x67\x8c\x1c\x3b\x2f\x7f\x86\x78\xd7\x7a\x19\x7b\x9e\x21\x8d\xa9\x22\x99\x73\x9b\xf8\x73\x8b\x64\x47\x33\x97\x6a\x5e\xbe\xea\x52\xa5\xe0\x12\x23\x65\x72\x3a\x23\xae\xea\xc3\x38\x37\x9b\xc2\x5e\x2e\x3f\xf6\x21\x6d\x30\x50\x4a\x7c\x49\xfe\xa9\xe3\xc1\x3d\x8f\x96\xea\x48\x81\x2c\x0a\xa5\xed\xbc\x0d\x07\x3c\xcd\xfc\xe0\xc5\xef\xcd\xdb\xcb\x01\x92\x7e\x0f\xde\xd9\xd3\x71\x04\x01\x63\x10\xc0\x5c\x93\xfb\xc6\x6a\x2b\xdb\x6a\xfd\x52\xeb\xe4\xe7\xd5\xc9\xff\x35\x07\xb1\x3c\xe5\x1e\xd4\x5a\xb9\xd6\xca\xb1\xa2\xef\x5d\x2b\xeb\x91\x8f\xdc\x60\xe8\xd7\xba\x38\xbd\xe6\x93\x2e\xce\x11\x8e\x77\x1d\x09\x70\xf4\x41\x1f\xdd\x1a\x63\x17\x5a\x8d\x7f\x05\x00\x00\xff\xff\x21\xa5\xc0\x0c\x81\xb7\x00\x00")

func dataGjishoGladeBytes() ([]byte, error) {
	return bindataRead(
		_dataGjishoGlade,
		"data/gjisho.glade",
	)
}

func dataGjishoGlade() (*asset, error) {
	bytes, err := dataGjishoGladeBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/gjisho.glade", size: 46977, mode: os.FileMode(436), modTime: time.Unix(1593802802, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/gjisho.glade": dataGjishoGlade,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"gjisho.glade": &bintree{dataGjishoGlade, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

